{"success": true, "error": null, "results": {"printers": [{"elements": [], "description": "{\n    \"payable\": {\n        \"IMulticall3\": [\n            \"aggregate((address,bytes)[])\",\n            \"aggregate3((address,bool,bytes)[])\",\n            \"aggregate3Value((address,bool,uint256,bytes)[])\",\n            \"blockAndAggregate((address,bytes)[])\",\n            \"tryAggregate(bool,(address,bytes)[])\",\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\"\n        ],\n        \"Actor\": [\n            \"constructor(address[],address[])\",\n            \"()\"\n        ]\n    },\n    \"timestamp\": {\n        \"MALGovernanceStaking\": [\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"createProposal(address,bytes)\",\n            \"vote(uint256,bool)\",\n            \"executeProposal(uint256)\",\n            \"calculateRewards(address)\",\n            \"claimRewards()\",\n            \"cleanExpiredProposals()\",\n            \"activeProposals()\"\n        ],\n        \"MALO\": [\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"claimRewards()\",\n            \"notifyRewardAmount(uint256)\",\n            \"rewardPerToken()\",\n            \"earned(address)\"\n        ],\n        \"Staker\": [\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"claimRewards(address)\",\n            \"addReward(address,uint256,uint256)\",\n            \"removeRewardToken(address)\",\n            \"lastTimeRewardApplicable(address)\",\n            \"earned(address,address)\"\n        ],\n        \"Staking\": [\n            \"rewardPerToken()\",\n            \"earned(address)\",\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"claimRewards()\",\n            \"notifyRewardAmount(uint256)\",\n            \"setRewardRate(uint256)\",\n            \"setRewardPeriod(uint256)\"\n        ],\n        \"CryticTester\": [\n            \"property_RewardPeriodState()\"\n        ],\n        \"Properties\": [\n            \"property_RewardPeriodState()\"\n        ],\n        \"TargetFunctions\": [\n            \"property_RewardPeriodState()\"\n        ]\n    },\n    \"block_number\": {},\n    \"msg_sender\": {\n        \"AccessControl\": [\n            \"grantRole(bytes32,address)\",\n            \"revokeRole(bytes32,address)\",\n            \"renounceRole(bytes32,address)\"\n        ],\n        \"ERC20\": [\n            \"transfer(address,uint256)\",\n            \"approve(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"MALGovernanceStaking\": [\n            \"grantRole(bytes32,address)\",\n            \"revokeRole(bytes32,address)\",\n            \"renounceRole(bytes32,address)\",\n            \"constructor(address,address,address)\",\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"createProposal(address,bytes)\",\n            \"vote(uint256,bool)\",\n            \"claimRewards()\",\n            \"updateVotingPeriod(uint256)\",\n            \"updateQuorum(uint256)\",\n            \"setWithdrawalCooldown(uint256)\"\n        ],\n        \"MALO\": [\n            \"grantRole(bytes32,address)\",\n            \"revokeRole(bytes32,address)\",\n            \"renounceRole(bytes32,address)\",\n            \"constructor(address,address,address,address)\",\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"claimRewards()\",\n            \"notifyRewardAmount(uint256)\",\n            \"setFeeConfig(uint256,uint256,address)\",\n            \"setRewardDuration(uint256)\",\n            \"setAntiDumpParams(uint256,uint256)\",\n            \"emergencyWithdraw()\"\n        ],\n        \"Staker\": [\n            \"grantRole(bytes32,address)\",\n            \"revokeRole(bytes32,address)\",\n            \"renounceRole(bytes32,address)\",\n            \"constructor(address,address,address)\",\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"claimRewards(address)\",\n            \"addReward(address,uint256,uint256)\",\n            \"removeRewardToken(address)\"\n        ],\n        \"Staking\": [\n            \"grantRole(bytes32,address)\",\n            \"revokeRole(bytes32,address)\",\n            \"renounceRole(bytes32,address)\",\n            \"constructor(address,address,address,uint256,address)\",\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"claimRewards()\",\n            \"notifyRewardAmount(uint256)\",\n            \"setRewardRate(uint256)\",\n            \"setRewardPeriod(uint256)\",\n            \"setProtocolFee(uint256)\",\n            \"setFeeRecipient(address)\",\n            \"emergencyWithdraw()\"\n        ],\n        \"CryticTester\": [\n            \"handler_stake(uint256)\",\n            \"handler_withdraw(uint256)\",\n            \"handler_claimRewards()\",\n            \"handler_emergencyWithdraw()\"\n        ],\n        \"TargetFunctions\": [\n            \"handler_stake(uint256)\",\n            \"handler_withdraw(uint256)\",\n            \"handler_claimRewards()\",\n            \"handler_emergencyWithdraw()\"\n        ],\n        \"ERC20Mock\": [\n            \"transfer(address,uint256)\",\n            \"approve(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ]\n    },\n    \"msg_gas\": {},\n    \"assert\": {\n        \"CryticTester\": {\n            \"property_ContractSolvency()\": [\n                {\n                    \"start\": 499,\n                    \"length\": 13,\n                    \"filename_relative\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_absolute\": \"/workspaces/codespaces-blank/Malo-Labs/contracts/lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_short\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"is_dependency\": true,\n                    \"lines\": [\n                        19\n                    ],\n                    \"starting_column\": 13,\n                    \"ending_column\": 26\n                }\n            ],\n            \"property_BalanceConsistency()\": [\n                {\n                    \"start\": 1060,\n                    \"length\": 13,\n                    \"filename_relative\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_absolute\": \"/workspaces/codespaces-blank/Malo-Labs/contracts/lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_short\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"is_dependency\": true,\n                    \"lines\": [\n                        40\n                    ],\n                    \"starting_column\": 13,\n                    \"ending_column\": 26\n                }\n            ]\n        }\n    },\n    \"constant_functions\": {\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"stdError\": [\n            \"assertionError()\",\n            \"arithmeticError()\",\n            \"divisionError()\",\n            \"enumConversionError()\",\n            \"encodeStorageError()\",\n            \"popError()\",\n            \"indexOOBError()\",\n            \"memOverflowError()\",\n            \"zeroVarError()\"\n        ],\n        \"StdInvariant\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\"\n        ],\n        \"Test\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"VmSafe\": [\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"publicKeyP256(uint256)\",\n            \"signCompact(uint256,bytes32)\",\n            \"signCompact(bytes32)\",\n            \"signCompact(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"sign(bytes32)\",\n            \"sign(address,bytes32)\",\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envExists(string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"isContext(uint8)\",\n            \"addr(uint256)\",\n            \"getBlobBaseFee()\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"getStateDiff()\",\n            \"getStateDiffJson()\",\n            \"lastCallGas()\",\n            \"load(address,bytes32)\",\n            \"exists(string)\",\n            \"fsMetadata(string)\",\n            \"getArtifactPathByCode(bytes)\",\n            \"getArtifactPathByDeployedCode(bytes)\",\n            \"getBroadcast(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"getDeployment(string)\",\n            \"getDeployment(string,uint64)\",\n            \"getDeployments(string,uint64)\",\n            \"isDir(string)\",\n            \"isFile(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"unixTime()\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonTypeArray(string,string,string)\",\n            \"parseJsonType(string,string)\",\n            \"parseJsonType(string,string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"serializeJsonType(string,bytes)\",\n            \"keyExists(string,string)\",\n            \"indexOf(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"assumeNoRevert()\",\n            \"assumeNoRevert((address,bool,bytes))\",\n            \"assumeNoRevert((address,bool,bytes)[])\",\n            \"breakpoint(string)\",\n            \"breakpoint(string,bool)\",\n            \"getFoundryVersion()\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlTypeArray(string,string,string)\",\n            \"parseTomlType(string,string)\",\n            \"parseTomlType(string,string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"ensNamehash(string)\",\n            \"getLabel(address)\",\n            \"pauseTracing()\",\n            \"randomBool()\",\n            \"randomBytes(uint256)\",\n            \"randomBytes4()\",\n            \"randomBytes8()\",\n            \"randomInt()\",\n            \"randomInt(uint256)\",\n            \"randomUint(uint256)\",\n            \"resumeTracing()\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\"\n        ],\n        \"Vm\": [\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"publicKeyP256(uint256)\",\n            \"signCompact(uint256,bytes32)\",\n            \"signCompact(bytes32)\",\n            \"signCompact(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"sign(bytes32)\",\n            \"sign(address,bytes32)\",\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envExists(string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"isContext(uint8)\",\n            \"addr(uint256)\",\n            \"getBlobBaseFee()\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"getStateDiff()\",\n            \"getStateDiffJson()\",\n            \"lastCallGas()\",\n            \"load(address,bytes32)\",\n            \"exists(string)\",\n            \"fsMetadata(string)\",\n            \"getArtifactPathByCode(bytes)\",\n            \"getArtifactPathByDeployedCode(bytes)\",\n            \"getBroadcast(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"getDeployment(string)\",\n            \"getDeployment(string,uint64)\",\n            \"getDeployments(string,uint64)\",\n            \"isDir(string)\",\n            \"isFile(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"unixTime()\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonTypeArray(string,string,string)\",\n            \"parseJsonType(string,string)\",\n            \"parseJsonType(string,string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"serializeJsonType(string,bytes)\",\n            \"keyExists(string,string)\",\n            \"indexOf(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"assumeNoRevert()\",\n            \"assumeNoRevert((address,bool,bytes))\",\n            \"assumeNoRevert((address,bool,bytes)[])\",\n            \"breakpoint(string)\",\n            \"breakpoint(string,bool)\",\n            \"getFoundryVersion()\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlTypeArray(string,string,string)\",\n            \"parseTomlType(string,string)\",\n            \"parseTomlType(string,string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"ensNamehash(string)\",\n            \"getLabel(address)\",\n            \"pauseTracing()\",\n            \"randomBool()\",\n            \"randomBytes(uint256)\",\n            \"randomBytes4()\",\n            \"randomBytes8()\",\n            \"randomInt()\",\n            \"randomInt(uint256)\",\n            \"randomUint(uint256)\",\n            \"resumeTracing()\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\",\n            \"activeFork()\",\n            \"getBlobhashes()\",\n            \"isPersistent(address)\"\n        ],\n        \"IERC20\": [\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"IMulticall3\": [\n            \"getBasefee()\",\n            \"getBlockHash(uint256)\",\n            \"getBlockNumber()\",\n            \"getChainId()\",\n            \"getCurrentBlockCoinbase()\",\n            \"getCurrentBlockDifficulty()\",\n            \"getCurrentBlockGasLimit()\",\n            \"getCurrentBlockTimestamp()\",\n            \"getEthBalance(address)\",\n            \"getLastBlockHash()\"\n        ],\n        \"AccessControl\": [\n            \"supportsInterface(bytes4)\",\n            \"hasRole(bytes32,address)\",\n            \"getRoleAdmin(bytes32)\",\n            \"DEFAULT_ADMIN_ROLE()\"\n        ],\n        \"IAccessControl\": [\n            \"hasRole(bytes32,address)\",\n            \"getRoleAdmin(bytes32)\"\n        ],\n        \"IVotes\": [\n            \"getVotes(address)\",\n            \"getPastVotes(address,uint256)\",\n            \"getPastTotalSupply(uint256)\",\n            \"delegates(address)\"\n        ],\n        \"IERC1363\": [\n            \"supportsInterface(bytes4)\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"ERC20\": [\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"IERC20Metadata\": [\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\"\n        ],\n        \"Pausable\": [\n            \"paused()\"\n        ],\n        \"ERC165\": [\n            \"supportsInterface(bytes4)\"\n        ],\n        \"IERC165\": [\n            \"supportsInterface(bytes4)\"\n        ],\n        \"MALGovernanceStaking\": [\n            \"paused()\",\n            \"supportsInterface(bytes4)\",\n            \"hasRole(bytes32,address)\",\n            \"getRoleAdmin(bytes32)\",\n            \"calculateRewards(address)\",\n            \"getVotingPower(address)\",\n            \"totalStaked()\",\n            \"stakedBalance(address)\",\n            \"activeProposals()\",\n            \"DEFAULT_ADMIN_ROLE()\",\n            \"GOVERNANCE_ADMIN_ROLE()\",\n            \"POLICY_MANAGER_ROLE()\",\n            \"malGovernanceToken()\",\n            \"malUtilityToken()\",\n            \"votingPeriod()\",\n            \"proposalThreshold()\",\n            \"quorumPercentage()\",\n            \"withdrawalCooldown()\",\n            \"proposalLifetime()\",\n            \"rewardRate()\",\n            \"lastStakeTime(address)\",\n            \"proposals(uint256)\",\n            \"hasVoted(address,uint256)\",\n            \"proposalCount()\"\n        ],\n        \"MALO\": [\n            \"paused()\",\n            \"supportsInterface(bytes4)\",\n            \"hasRole(bytes32,address)\",\n            \"getRoleAdmin(bytes32)\",\n            \"rewardPerToken()\",\n            \"earned(address)\",\n            \"totalStaked()\",\n            \"DEFAULT_ADMIN_ROLE()\",\n            \"REWARDS_ADMIN_ROLE()\",\n            \"LIQUIDITY_GUARDIAN_ROLE()\",\n            \"stakingToken()\",\n            \"malToken()\",\n            \"rewardDuration()\",\n            \"rewardRate()\",\n            \"periodFinish()\",\n            \"lastUpdateTime()\",\n            \"rewardPerTokenStored()\",\n            \"lastStakeTime(address)\",\n            \"userRewardPerTokenPaid(address)\",\n            \"rewards(address)\",\n            \"vestingStart(address)\",\n            \"totalVested(address)\",\n            \"claimLockPeriod()\",\n            \"maxDailyClaimPercent()\",\n            \"withdrawalFeeBps()\",\n            \"MAX_FEE_BPS()\",\n            \"feeReceiver()\"\n        ],\n        \"RewardsDistributionRecipient\": [\n            \"rewardsDistribution()\",\n            \"maloToken()\"\n        ],\n        \"Staker\": [\n            \"paused()\",\n            \"supportsInterface(bytes4)\",\n            \"hasRole(bytes32,address)\",\n            \"getRoleAdmin(bytes32)\",\n            \"lastTimeRewardApplicable(address)\",\n            \"earned(address,address)\",\n            \"totalStaked()\",\n            \"stakedBalanceOf(address)\",\n            \"DEFAULT_ADMIN_ROLE()\",\n            \"REWARDS_ADMIN_ROLE()\",\n            \"PAUSE_GUARDIAN_ROLE()\",\n            \"stakingToken()\",\n            \"rewardTokens(uint256)\",\n            \"isRewardToken(address)\",\n            \"rewards(address)\",\n            \"userRewardPerTokenPaid(address,address)\",\n            \"rewardsEarned(address,address)\"\n        ],\n        \"Staking\": [\n            \"paused()\",\n            \"supportsInterface(bytes4)\",\n            \"hasRole(bytes32,address)\",\n            \"getRoleAdmin(bytes32)\",\n            \"rewardPerToken()\",\n            \"earned(address)\",\n            \"totalStaked()\",\n            \"balanceOf(address)\",\n            \"getRewardForDuration()\",\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\",\n            \"DEFAULT_ADMIN_ROLE()\",\n            \"rewardsDistribution()\",\n            \"maloToken()\",\n            \"FEE_SETTER_ROLE()\",\n            \"stakingToken()\",\n            \"feeRecipient()\",\n            \"periodFinish()\",\n            \"rewardRate()\",\n            \"lastUpdateTime()\",\n            \"rewardPerTokenStored()\",\n            \"protocolFee()\",\n            \"rewardPeriod()\",\n            \"totalRewardsDistributed()\",\n            \"userRewardPerTokenPaid(address)\",\n            \"rewards(address)\",\n            \"rewardsClaimed(address)\"\n        ],\n        \"Actor\": [\n            \"getApprovedTokens()\",\n            \"getApprovedContracts()\",\n            \"lastTarget()\",\n            \"allowances(address,address)\"\n        ],\n        \"BeforeAfter\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\",\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\",\n            \"staking()\",\n            \"stakingToken()\",\n            \"maloToken()\",\n            \"owner()\",\n            \"feeRecipient()\"\n        ],\n        \"Constants\": [\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\"\n        ],\n        \"CryticTester\": [\n            \"property_RewardPeriodState()\",\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\",\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\",\n            \"staking()\",\n            \"stakingToken()\",\n            \"maloToken()\",\n            \"owner()\",\n            \"feeRecipient()\"\n        ],\n        \"Ghosts\": [\n            \"staking()\",\n            \"stakingToken()\",\n            \"rewardToken()\"\n        ],\n        \"Properties\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"property_ContractSolvency()\",\n            \"property_BalanceConsistency()\",\n            \"property_RewardPeriodState()\",\n            \"IS_TEST()\",\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\",\n            \"staking()\",\n            \"stakingToken()\",\n            \"maloToken()\",\n            \"owner()\",\n            \"feeRecipient()\"\n        ],\n        \"Setup\": [\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\",\n            \"stakingToken()\",\n            \"maloToken()\",\n            \"staking()\",\n            \"defaultGovernance()\",\n            \"techOpsMultisig()\"\n        ],\n        \"TargetFunctions\": [\n            \"property_ContractSolvency()\",\n            \"property_BalanceConsistency()\",\n            \"property_RewardPeriodState()\",\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\",\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\",\n            \"staking()\",\n            \"stakingToken()\",\n            \"maloToken()\",\n            \"owner()\",\n            \"feeRecipient()\"\n        ],\n        \"ERC20Mock\": [\n            \"name()\",\n            \"symbol()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"decimals()\"\n        ]\n    },\n    \"constants_used\": {\n        \"StdAssertions\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"Test\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"AccessControl\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2036718347\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ],\n            \"grantRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"revokeRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"renounceRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20\": {\n            \"decimals()\": [\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ]\n        },\n        \"ERC165\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ]\n        },\n        \"MALGovernanceStaking\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2036718347\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ],\n            \"grantRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"revokeRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"renounceRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"constructor(address,address,address)\": [\n                [\n                    {\n                        \"value\": \"GOVERNANCE_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b\\\"\\\\xe7\\\\xe0\\\\xb3\\\\x01\\\\xde\\\\x1c\\\\x1e&\\\\x80s\\\\xa6\\\\xb5o\\\\xf0\\\\x87l\\\\xff\\\\xca\\\\x0b\\\\xec\\\\xba\\\\r\\\\xca\\\\x08\\\\xf9E\\\\xc19N>\\\\x97'\\\"\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"POLICY_MANAGER_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b\\\"'$\\\\xe1\\\\xc9c\\\\xeb\\\\x14e\\\\xb5\\\\x120\\\\x91\\\\r,\\\\xa7\\\\xbet\\\\xb7\\\\x18\\\\x83\\\\xf8\\\\xca\\\\xb7 v\\\\xd8\\\\xc1.\\\\x08l+H\\\"\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"stake(uint256)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"withdraw(uint256)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"172800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"createProposal(address,bytes)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"vote(uint256,bool)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"executeProposal(uint256)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"calculateRewards(address)\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimRewards()\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"updateVotingPeriod(uint256)\": [\n                [\n                    {\n                        \"value\": \"POLICY_MANAGER_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"votingPeriod\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b\\\"'$\\\\xe1\\\\xc9c\\\\xeb\\\\x14e\\\\xb5\\\\x120\\\\x91\\\\r,\\\\xa7\\\\xbet\\\\xb7\\\\x18\\\\x83\\\\xf8\\\\xca\\\\xb7 v\\\\xd8\\\\xc1.\\\\x08l+H\\\"\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"updateQuorum(uint256)\": [\n                [\n                    {\n                        \"value\": \"b\\\"\\\\xe7\\\\xe0\\\\xb3\\\\x01\\\\xde\\\\x1c\\\\x1e&\\\\x80s\\\\xa6\\\\xb5o\\\\xf0\\\\x87l\\\\xff\\\\xca\\\\x0b\\\\xec\\\\xba\\\\r\\\\xca\\\\x08\\\\xf9E\\\\xc19N>\\\\x97'\\\"\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"GOVERNANCE_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"quorumPercentage\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setWithdrawalCooldown(uint256)\": [\n                [\n                    {\n                        \"value\": \"GOVERNANCE_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"withdrawalCooldown\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b\\\"\\\\xe7\\\\xe0\\\\xb3\\\\x01\\\\xde\\\\x1c\\\\x1e&\\\\x80s\\\\xa6\\\\xb5o\\\\xf0\\\\x87l\\\\xff\\\\xca\\\\x0b\\\\xec\\\\xba\\\\r\\\\xca\\\\x08\\\\xf9E\\\\xc19N>\\\\x97'\\\"\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"cleanExpiredProposals()\": [\n                [\n                    {\n                        \"value\": \"2592000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"activeProposals()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"MALO\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2036718347\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ],\n            \"grantRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"revokeRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"renounceRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"constructor(address,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"Zero address\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid roles\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xf6\\\\xcae|`\\\\x04\\\\xe5\\\\x17\\\\x8d\\\\x97\\\\xdf\\\\x82\\\\x94\\\\xc5`q\\\\x92\\\\x8f\\\\x00J\\\\xe5\\\\xd4\\\\xf6\\\\x8c\\\\xba\\\\xcb\\\\xd0\\\\x0b\\\\xd4\\\\xd1\\\\xc6\\\\xe2'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REWARDS_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xdbo\\\\xba\\\\xe5\\\\xcd\\\\x13\\\\xd8&M~\\\\xd1\\\"\\\\x19\\\\xef(\\\\x82\\\\xc1\\\\xe8;\\\\x8b\\\\x12\\\\xf4x\\\\x19\\\\xba\\\\xa9o2\\\\xf6\\\\x9a\\\\x16\\\\x82'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"LIQUIDITY_GUARDIAN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"stake(uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot stake 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"withdraw(uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid amount\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"86400\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimRewards()\": [\n                [\n                    {\n                        \"value\": \"Vesting active\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"No rewards\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"86400\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"notifyRewardAmount(uint256)\": [\n                [\n                    {\n                        \"value\": \"No reward\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Reward too small\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REWARDS_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xdbo\\\\xba\\\\xe5\\\\xcd\\\\x13\\\\xd8&M~\\\\xd1\\\"\\\\x19\\\\xef(\\\\x82\\\\xc1\\\\xe8;\\\\x8b\\\\x12\\\\xf4x\\\\x19\\\\xba\\\\xa9o2\\\\xf6\\\\x9a\\\\x16\\\\x82'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setFeeConfig(uint256,uint256,address)\": [\n                [\n                    {\n                        \"value\": \"Fee too high\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid receiver\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xf6\\\\xcae|`\\\\x04\\\\xe5\\\\x17\\\\x8d\\\\x97\\\\xdf\\\\x82\\\\x94\\\\xc5`q\\\\x92\\\\x8f\\\\x00J\\\\xe5\\\\xd4\\\\xf6\\\\x8c\\\\xba\\\\xcb\\\\xd0\\\\x0b\\\\xd4\\\\xd1\\\\xc6\\\\xe2'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"LIQUIDITY_GUARDIAN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setRewardDuration(uint256)\": [\n                [\n                    {\n                        \"value\": \"Invalid duration\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REWARDS_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xdbo\\\\xba\\\\xe5\\\\xcd\\\\x13\\\\xd8&M~\\\\xd1\\\"\\\\x19\\\\xef(\\\\x82\\\\xc1\\\\xe8;\\\\x8b\\\\x12\\\\xf4x\\\\x19\\\\xba\\\\xa9o2\\\\xf6\\\\x9a\\\\x16\\\\x82'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setAntiDumpParams(uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"LIQUIDITY_GUARDIAN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xf6\\\\xcae|`\\\\x04\\\\xe5\\\\x17\\\\x8d\\\\x97\\\\xdf\\\\x82\\\\x94\\\\xc5`q\\\\x92\\\\x8f\\\\x00J\\\\xe5\\\\xd4\\\\xf6\\\\x8c\\\\xba\\\\xcb\\\\xd0\\\\x0b\\\\xd4\\\\xd1\\\\xc6\\\\xe2'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid percentage\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"emergencyWithdraw()\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"No stake\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"rewardPerToken()\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"earned(address)\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Staker\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2036718347\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ],\n            \"grantRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"revokeRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"renounceRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"constructor(address,address,address)\": [\n                [\n                    {\n                        \"value\": \"Invalid admin address\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PAUSE_GUARDIAN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b';\\\\xb1\\\\x81\\\\xd5h\\\\x91d\\\\xb4\\\\xd7-4\\\\xb0V\\\"\\\\x8c\\\\x95\\\\xb5\\\\x1f?\\\\xb0\\\\xf6\\\\xdb\\\\xdb\\\\x7f\\\\x9d\\\\xdb\\\\xa5\\\\xf9\\\\x1ch!\\\\xdd'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REWARDS_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid pause guardian\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xdbo\\\\xba\\\\xe5\\\\xcd\\\\x13\\\\xd8&M~\\\\xd1\\\"\\\\x19\\\\xef(\\\\x82\\\\xc1\\\\xe8;\\\\x8b\\\\x12\\\\xf4x\\\\x19\\\\xba\\\\xa9o2\\\\xf6\\\\x9a\\\\x16\\\\x82'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid staking token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"stake(uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot stake 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"withdraw(uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot withdraw 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Insufficient balance\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"claimRewards(address)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"No rewards to claim\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"addReward(address,uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TotalRewards must be divisible by duration\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REWARDS_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid reward token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xdbo\\\\xba\\\\xe5\\\\xcd\\\\x13\\\\xd8&M~\\\\xd1\\\"\\\\x19\\\\xef(\\\\x82\\\\xc1\\\\xe8;\\\\x8b\\\\x12\\\\xf4x\\\\x19\\\\xba\\\\xa9o2\\\\xf6\\\\x9a\\\\x16\\\\x82'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Previous reward ongoing\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid parameters\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"removeRewardToken(address)\": [\n                [\n                    {\n                        \"value\": \"Reward ongoing\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Not a reward token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REWARDS_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xdbo\\\\xba\\\\xe5\\\\xcd\\\\x13\\\\xd8&M~\\\\xd1\\\"\\\\x19\\\\xef(\\\\x82\\\\xc1\\\\xe8;\\\\x8b\\\\x12\\\\xf4x\\\\x19\\\\xba\\\\xa9o2\\\\xf6\\\\x9a\\\\x16\\\\x82'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"earned(address,address)\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Staking\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2036718347\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ],\n            \"grantRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"revokeRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"renounceRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"constructor(address,address,address,uint256,address)\": [\n                [\n                    {\n                        \"value\": \"b'e\\\\xd7\\\\xa2\\\\x8e2e\\\\xb3zdt\\\\x92\\\\x9f3e!\\\\xb32\\\\xc1h\\\\x1b\\\\x93?l\\\\xb9\\\\xf37fsD\\\\r\\\\x86*'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xe6\\\\xad\\\\x9aG\\\\xfb\\\\xda\\\\x1d\\\\xc1\\\\x8d\\\\xe1\\\\xeb^\\\\xeb}\\\\x93^^\\\\x81\\\\xb4t\\\\x8f<\\\\xfca\\\\xe23\\\\xe6O\\\\x88\\\\x18 `'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PAUSER_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"FEE_SETTER_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"rewardPerToken()\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"earned(address)\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"stake(uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"withdraw(uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimRewards()\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"notifyRewardAmount(uint256)\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Caller is not RewardsDistribution\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setRewardRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Caller is not RewardsDistribution\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setRewardPeriod(uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setProtocolFee(uint256)\": [\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xe6\\\\xad\\\\x9aG\\\\xfb\\\\xda\\\\x1d\\\\xc1\\\\x8d\\\\xe1\\\\xeb^\\\\xeb}\\\\x93^^\\\\x81\\\\xb4t\\\\x8f<\\\\xfca\\\\xe23\\\\xe6O\\\\x88\\\\x18 `'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"FEE_SETTER_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setFeeRecipient(address)\": [\n                [\n                    {\n                        \"value\": \"b'\\\\xe6\\\\xad\\\\x9aG\\\\xfb\\\\xda\\\\x1d\\\\xc1\\\\x8d\\\\xe1\\\\xeb^\\\\xeb}\\\\x93^^\\\\x81\\\\xb4t\\\\x8f<\\\\xfca\\\\xe23\\\\xe6O\\\\x88\\\\x18 `'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"FEE_SETTER_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"emergencyWithdraw()\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Actor\": {\n            \"constructor(address[],address[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"proxy(address,bytes)\": [\n                [\n                    {\n                        \"value\": \"147028384\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Unknown error\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1313373041\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Panic: \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"proxy(address,bytes,uint256)\": [\n                [\n                    {\n                        \"value\": \"147028384\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Unknown error\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1313373041\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Panic: \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"revokeApproval(address,address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"BeforeAfter\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"MALO\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"291\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"STK\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1209600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Staking Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Malo Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"CryticTester\": {\n            \"handler_stake(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_withdraw(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_claimRewards()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_setRewardRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_setProtocolFee(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_setFeeRecipient(address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_emergencyWithdraw()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"property_ContractSolvency()\": [\n                [\n                    {\n                        \"value\": \"Contract must remain solvent\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"property_BalanceConsistency()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1008707306819937145937943608908430687638506176512\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"User balances must match total staked\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"919791448120245735144748008190597589268974010368\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"property_RewardPeriodState()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Reward rate must be positive during active period\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Reward rate must be zero after period ends\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"MALO\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"291\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"STK\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1209600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Staking Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Malo Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"Properties\": {\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"MALO\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1209600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"STK\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"291\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Staking Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Malo Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"property_ContractSolvency()\": [\n                [\n                    {\n                        \"value\": \"Contract must remain solvent\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"property_BalanceConsistency()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1008707306819937145937943608908430687638506176512\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"User balances must match total staked\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"919791448120245735144748008190597589268974010368\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"property_RewardPeriodState()\": [\n                [\n                    {\n                        \"value\": \"Reward rate must be positive during active period\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Reward rate must be zero after period ends\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"TargetFunctions\": {\n            \"property_ContractSolvency()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Contract must remain solvent\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"property_BalanceConsistency()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1008707306819937145937943608908430687638506176512\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"User balances must match total staked\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"919791448120245735144748008190597589268974010368\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"property_RewardPeriodState()\": [\n                [\n                    {\n                        \"value\": \"Reward rate must be positive during active period\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Reward rate must be zero after period ends\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"MALO\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"291\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"STK\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1209600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Staking Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Malo Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"handler_stake(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_withdraw(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_claimRewards()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_setRewardRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_setProtocolFee(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_setFeeRecipient(address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_emergencyWithdraw()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20Mock\": {\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"mint(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"decimals()\": [\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint8\"\n                    }\n                ]\n            ]\n        }\n    },\n    \"constants_used_in_binary\": {\n        \"MALGovernanceStaking\": {\n            \"stake(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"createProposal(address,bytes)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"vote(uint256,bool)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"executeProposal(uint256)\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"calculateRewards(address)\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewards()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"updateQuorum(uint256)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"cleanExpiredProposals()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"activeProposals()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"MALO\": {\n            \"stake(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewards()\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"notifyRewardAmount(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setRewardDuration(uint256)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setAntiDumpParams(uint256,uint256)\": {\n                \"BinaryType.LESS_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"emergencyWithdraw()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"rewardPerToken()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"earned(address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"Staker\": {\n            \"stake(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewards(address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"addReward(address,uint256,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"removeRewardToken(address)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"earned(address,address)\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"Staking\": {\n            \"constructor(address,address,address,uint256,address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"rewardPerToken()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"earned(address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"stake(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewards()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"notifyRewardAmount(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setRewardRate(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setRewardPeriod(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setProtocolFee(uint256)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"emergencyWithdraw()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"Actor\": {\n            \"constructor(address[],address[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"proxy(address,bytes)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"147028384\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1313373041\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"proxy(address,bytes,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"147028384\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1313373041\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticTester\": {\n            \"handler_stake(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"handler_withdraw(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"handler_claimRewards()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"property_BalanceConsistency()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"property_RewardPeriodState()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"Properties\": {\n            \"property_BalanceConsistency()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"property_RewardPeriodState()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"TargetFunctions\": {\n            \"property_BalanceConsistency()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"property_RewardPeriodState()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"handler_stake(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"handler_withdraw(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"handler_claimRewards()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        }\n    },\n    \"functions_relations\": {\n        \"Asserts\": {},\n        \"BaseProperties\": {},\n        \"BaseSetup\": {},\n        \"BaseTargetFunctions\": {},\n        \"CryticAsserts\": {},\n        \"IHevm\": {\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"CommonBase\": {},\n        \"TestBase\": {},\n        \"ScriptBase\": {},\n        \"StdAssertions\": {\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"StdChains\": {},\n        \"StdCheatsSafe\": {},\n        \"StdCheats\": {},\n        \"StdConstants\": {},\n        \"stdError\": {},\n        \"StdInvariant\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"stdJson\": {},\n        \"stdMath\": {},\n        \"stdStorageSafe\": {},\n        \"stdStorage\": {},\n        \"StdStyle\": {},\n        \"stdToml\": {},\n        \"StdUtils\": {},\n        \"Test\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"VmSafe\": {\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"publicKeyP256(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envExists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isContext(uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobBaseFee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiffJson()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"lastCallGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByDeployedCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcast(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployments(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prompt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecret(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecretUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUintToHex(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachDelegation((uint8,bytes32,bytes32,uint64,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcastRawTransaction(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getWallets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"contains(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"indexOf(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getFoundryVersion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyStorage(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ensNamehash(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomAddress()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes4()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes8()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Vm\": {\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"publicKeyP256(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envExists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isContext(uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobBaseFee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiffJson()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"lastCallGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByDeployedCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcast(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployments(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prompt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecret(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecretUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUintToHex(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachDelegation((uint8,bytes32,bytes32,uint64,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcastRawTransaction(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getWallets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"contains(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"indexOf(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getFoundryVersion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyStorage(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ensNamehash(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomAddress()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes4()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes8()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowCheatcodes(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blobBaseFee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blobhashes(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"chainId(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"clearMockedCalls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cloneAccount(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"coinbase(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteStateSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteStateSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"difficulty(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"dumpState(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobhashes()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isPersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"loadAllocs(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCalls(address,bytes,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCalls(address,uint256,bytes,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockFunction(address,address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readCallers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToState(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToStateAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setBlockhash(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonce(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonceUnsafe(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotGasLastCall(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotGasLastCall(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotState()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotValue(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotValue(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startSnapshotGas(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startSnapshotGas(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"txGasPrice(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertTo(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(bool,bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(bool,bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectPartialRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectPartialRevert(bytes4,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemory(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemoryCall(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopExpectSafeMemory()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"console\": {},\n        \"IERC20\": {\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IMulticall3\": {\n            \"aggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3Value((address,bool,uint256,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blockAndAggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBasefee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockHash(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChainId()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockCoinbase()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockDifficulty()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockGasLimit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getEthBalance(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLastBlockHash()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"safeconsole\": {},\n        \"AccessControl\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hasRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ]\n            },\n            \"getRoleAdmin(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ]\n            },\n            \"grantRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ]\n            },\n            \"revokeRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ]\n            },\n            \"renounceRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ]\n            }\n        },\n        \"IAccessControl\": {\n            \"hasRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRoleAdmin(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"grantRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokeRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"renounceRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IVotes\": {\n            \"getVotes(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getPastVotes(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getPastTotalSupply(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"delegates(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"delegate(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC1363\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferAndCall(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferAndCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFromAndCall(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFromAndCall(address,address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approveAndCall(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approveAndCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC20Errors\": {},\n        \"IERC721Errors\": {},\n        \"IERC1155Errors\": {},\n        \"ERC20\": {\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"totalSupply()\",\n                    \"balanceOf(address)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"allowance(address,address)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"totalSupply()\",\n                    \"balanceOf(address)\",\n                    \"transfer(address,uint256)\",\n                    \"allowance(address,address)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            }\n        },\n        \"IERC20Metadata\": {\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"SafeERC20\": {},\n        \"Arrays\": {},\n        \"Comparators\": {},\n        \"Context\": {},\n        \"Panic\": {},\n        \"Pausable\": {\n            \"paused()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ReentrancyGuard\": {},\n        \"SlotDerivation\": {},\n        \"StorageSlot\": {},\n        \"ERC165\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC165\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Math\": {},\n        \"SafeCast\": {},\n        \"EnumerableSet\": {},\n        \"MALGovernanceStaking\": {\n            \"paused()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hasRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"getRoleAdmin(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"grantRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"updateVotingPeriod(uint256)\",\n                    \"updateQuorum(uint256)\",\n                    \"setWithdrawalCooldown(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"revokeRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"updateVotingPeriod(uint256)\",\n                    \"updateQuorum(uint256)\",\n                    \"setWithdrawalCooldown(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"renounceRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"updateVotingPeriod(uint256)\",\n                    \"updateQuorum(uint256)\",\n                    \"setWithdrawalCooldown(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"constructor(address,address,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"createProposal(address,bytes)\",\n                    \"vote(uint256,bool)\",\n                    \"claimRewards()\",\n                    \"updateVotingPeriod(uint256)\",\n                    \"updateQuorum(uint256)\",\n                    \"setWithdrawalCooldown(uint256)\",\n                    \"getVotingPower(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"stake(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"executeProposal(uint256)\",\n                    \"calculateRewards(address)\",\n                    \"claimRewards()\",\n                    \"totalStaked()\",\n                    \"stakedBalance(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"executeProposal(uint256)\",\n                    \"claimRewards()\"\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"executeProposal(uint256)\",\n                    \"calculateRewards(address)\",\n                    \"claimRewards()\",\n                    \"totalStaked()\",\n                    \"stakedBalance(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"executeProposal(uint256)\",\n                    \"claimRewards()\",\n                    \"setWithdrawalCooldown(uint256)\"\n                ]\n            },\n            \"createProposal(address,bytes)\": {\n                \"impacts\": [\n                    \"createProposal(address,bytes)\",\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"cleanExpiredProposals()\",\n                    \"activeProposals()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"createProposal(address,bytes)\",\n                    \"updateVotingPeriod(uint256)\"\n                ]\n            },\n            \"vote(uint256,bool)\": {\n                \"impacts\": [\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"cleanExpiredProposals()\",\n                    \"activeProposals()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"createProposal(address,bytes)\",\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"cleanExpiredProposals()\"\n                ]\n            },\n            \"executeProposal(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"claimRewards()\",\n                    \"cleanExpiredProposals()\",\n                    \"activeProposals()\"\n                ],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"createProposal(address,bytes)\",\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"claimRewards()\",\n                    \"updateQuorum(uint256)\",\n                    \"cleanExpiredProposals()\"\n                ]\n            },\n            \"calculateRewards(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\"\n                ]\n            },\n            \"claimRewards()\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"executeProposal(uint256)\",\n                    \"calculateRewards(address)\",\n                    \"claimRewards()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"executeProposal(uint256)\",\n                    \"claimRewards()\"\n                ]\n            },\n            \"updateVotingPeriod(uint256)\": {\n                \"impacts\": [\n                    \"createProposal(address,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"updateQuorum(uint256)\": {\n                \"impacts\": [\n                    \"executeProposal(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"setWithdrawalCooldown(uint256)\": {\n                \"impacts\": [\n                    \"withdraw(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"cleanExpiredProposals()\": {\n                \"impacts\": [\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"cleanExpiredProposals()\",\n                    \"activeProposals()\"\n                ],\n                \"is_impacted_by\": [\n                    \"createProposal(address,bytes)\",\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"cleanExpiredProposals()\"\n                ]\n            },\n            \"getVotingPower(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"totalStaked()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\"\n                ]\n            },\n            \"stakedBalance(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\"\n                ]\n            },\n            \"activeProposals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"createProposal(address,bytes)\",\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"cleanExpiredProposals()\"\n                ]\n            }\n        },\n        \"MALO\": {\n            \"paused()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hasRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"getRoleAdmin(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"grantRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setFeeConfig(uint256,uint256,address)\",\n                    \"setRewardDuration(uint256)\",\n                    \"setAntiDumpParams(uint256,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"revokeRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setFeeConfig(uint256,uint256,address)\",\n                    \"setRewardDuration(uint256)\",\n                    \"setAntiDumpParams(uint256,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"renounceRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setFeeConfig(uint256,uint256,address)\",\n                    \"setRewardDuration(uint256)\",\n                    \"setAntiDumpParams(uint256,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"constructor(address,address,address,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setFeeConfig(uint256,uint256,address)\",\n                    \"setRewardDuration(uint256)\",\n                    \"setAntiDumpParams(uint256,uint256)\",\n                    \"emergencyWithdraw()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"stake(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"totalStaked()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"totalStaked()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setFeeConfig(uint256,uint256,address)\",\n                    \"setAntiDumpParams(uint256,uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"claimRewards()\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"rewardPerToken()\",\n                    \"earned(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setFeeConfig(uint256,uint256,address)\",\n                    \"setAntiDumpParams(uint256,uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"notifyRewardAmount(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"rewardPerToken()\",\n                    \"earned(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardDuration(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"setFeeConfig(uint256,uint256,address)\": {\n                \"impacts\": [\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"setRewardDuration(uint256)\": {\n                \"impacts\": [\n                    \"notifyRewardAmount(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"setAntiDumpParams(uint256,uint256)\": {\n                \"impacts\": [\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"emergencyWithdraw()\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"totalStaked()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"rewardPerToken()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"earned(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"totalStaked()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            }\n        },\n        \"RewardsDistributionRecipient\": {\n            \"notifyRewardAmount(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setRewardsDistribution(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Staker\": {\n            \"paused()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hasRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"getRoleAdmin(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"grantRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"revokeRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"renounceRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"constructor(address,address,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"stake(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\",\n                    \"lastTimeRewardApplicable(address)\",\n                    \"earned(address,address)\",\n                    \"totalStaked()\",\n                    \"stakedBalanceOf(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\",\n                    \"lastTimeRewardApplicable(address)\",\n                    \"earned(address,address)\",\n                    \"totalStaked()\",\n                    \"stakedBalanceOf(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ]\n            },\n            \"claimRewards(address)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\",\n                    \"lastTimeRewardApplicable(address)\",\n                    \"earned(address,address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ]\n            },\n            \"addReward(address,uint256,uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\",\n                    \"lastTimeRewardApplicable(address)\",\n                    \"earned(address,address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ]\n            },\n            \"removeRewardToken(address)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ]\n            },\n            \"lastTimeRewardApplicable(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\"\n                ]\n            },\n            \"earned(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\"\n                ]\n            },\n            \"totalStaked()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\"\n                ]\n            },\n            \"stakedBalanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\"\n                ]\n            }\n        },\n        \"Staking\": {\n            \"setRewardsDistribution(address)\": {\n                \"impacts\": [\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"paused()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hasRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"getRoleAdmin(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"grantRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"setProtocolFee(uint256)\",\n                    \"setFeeRecipient(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"revokeRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"setProtocolFee(uint256)\",\n                    \"setFeeRecipient(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"renounceRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"setProtocolFee(uint256)\",\n                    \"setFeeRecipient(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"constructor(address,address,address,uint256,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"setProtocolFee(uint256)\",\n                    \"setFeeRecipient(address)\",\n                    \"emergencyWithdraw()\",\n                    \"getRewardForDuration()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"rewardPerToken()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"earned(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"stake(uint256)\": {\n                \"impacts\": [\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"totalStaked()\",\n                    \"balanceOf(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"impacts\": [\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"totalStaked()\",\n                    \"balanceOf(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"claimRewards()\": {\n                \"impacts\": [\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setProtocolFee(uint256)\",\n                    \"setFeeRecipient(address)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"notifyRewardAmount(uint256)\": {\n                \"impacts\": [\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"getRewardForDuration()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setRewardsDistribution(address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"setRewardRate(uint256)\": {\n                \"impacts\": [\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"getRewardForDuration()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setRewardsDistribution(address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"setRewardPeriod(uint256)\": {\n                \"impacts\": [\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"getRewardForDuration()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\"\n                ]\n            },\n            \"setProtocolFee(uint256)\": {\n                \"impacts\": [\n                    \"claimRewards()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"setFeeRecipient(address)\": {\n                \"impacts\": [\n                    \"claimRewards()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"emergencyWithdraw()\": {\n                \"impacts\": [\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"totalStaked()\",\n                    \"balanceOf(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"totalStaked()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"getRewardForDuration()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setRewardPeriod(uint256)\"\n                ]\n            }\n        },\n        \"Errors\": {},\n        \"Actor\": {\n            \"constructor(address[],address[])\": {\n                \"impacts\": [\n                    \"constructor(address[],address[])\",\n                    \"getApprovedTokens()\",\n                    \"getApprovedContracts()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address[],address[])\",\n                    \"revokeApproval(address,address)\"\n                ]\n            },\n            \"proxy(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"proxy(address,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokeApproval(address,address)\": {\n                \"impacts\": [\n                    \"constructor(address[],address[])\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"getApprovedTokens()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address[],address[])\"\n                ]\n            },\n            \"getApprovedContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address[],address[])\"\n                ]\n            },\n            \"()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"BeforeAfter\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"Constants\": {},\n        \"CryticTester\": {\n            \"handler_stake(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_withdraw(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_claimRewards()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_setRewardRate(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_setProtocolFee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_setFeeRecipient(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_emergencyWithdraw()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_ContractSolvency()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_BalanceConsistency()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_RewardPeriodState()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"handler_stake(uint256)\",\n                    \"handler_withdraw(uint256)\",\n                    \"handler_claimRewards()\",\n                    \"handler_setRewardRate(uint256)\",\n                    \"handler_setProtocolFee(uint256)\",\n                    \"handler_setFeeRecipient(address)\",\n                    \"handler_emergencyWithdraw()\",\n                    \"property_ContractSolvency()\",\n                    \"property_BalanceConsistency()\",\n                    \"property_RewardPeriodState()\",\n                    \"setUp()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ExpectedErrors\": {},\n        \"Ghosts\": {},\n        \"Properties\": {\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\",\n                    \"property_ContractSolvency()\",\n                    \"property_BalanceConsistency()\",\n                    \"property_RewardPeriodState()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"property_ContractSolvency()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_BalanceConsistency()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_RewardPeriodState()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"Setup\": {},\n        \"TargetFunctions\": {\n            \"property_ContractSolvency()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_BalanceConsistency()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_RewardPeriodState()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"property_ContractSolvency()\",\n                    \"property_BalanceConsistency()\",\n                    \"property_RewardPeriodState()\",\n                    \"setUp()\",\n                    \"handler_stake(uint256)\",\n                    \"handler_withdraw(uint256)\",\n                    \"handler_claimRewards()\",\n                    \"handler_setRewardRate(uint256)\",\n                    \"handler_setProtocolFee(uint256)\",\n                    \"handler_setFeeRecipient(address)\",\n                    \"handler_emergencyWithdraw()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"handler_stake(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_withdraw(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_claimRewards()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_setRewardRate(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_setProtocolFee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_setFeeRecipient(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_emergencyWithdraw()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"ActorManager\": {},\n        \"AssetManager\": {},\n        \"ERC20Mock\": {\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(string,string)\"\n                ]\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(string,string)\"\n                ]\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ]\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ]\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"totalSupply()\",\n                    \"balanceOf(address)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ]\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"allowance(address,address)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"totalSupply()\",\n                    \"balanceOf(address)\",\n                    \"transfer(address,uint256)\",\n                    \"allowance(address,address)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ]\n            },\n            \"constructor(string,string)\": {\n                \"impacts\": [\n                    \"name()\",\n                    \"symbol()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"totalSupply()\",\n                    \"balanceOf(address)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ]\n            },\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        }\n    },\n    \"constructors\": {\n        \"ERC20\": \"constructor(string,string)\",\n        \"ReentrancyGuard\": \"constructor()\",\n        \"MALGovernanceStaking\": \"constructor(address,address,address)\",\n        \"MALO\": \"constructor(address,address,address,address)\",\n        \"RewardsDistributionRecipient\": \"constructor(address,address)\",\n        \"Staker\": \"constructor(address,address,address)\",\n        \"Staking\": \"constructor(address,address,address,uint256,address)\",\n        \"Actor\": \"constructor(address[],address[])\",\n        \"CryticTester\": \"constructor()\",\n        \"ExpectedErrors\": \"constructor()\",\n        \"Ghosts\": \"constructor(Staking,IERC20,IERC20)\",\n        \"Setup\": \"constructor()\",\n        \"ActorManager\": \"constructor()\",\n        \"AssetManager\": \"constructor()\",\n        \"ERC20Mock\": \"constructor(string,string)\"\n    },\n    \"have_external_calls\": {\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"Test\": [\n            \"failed()\"\n        ],\n        \"MALGovernanceStaking\": [\n            \"claimRewards()\",\n            \"getVotingPower(address)\",\n            \"withdraw(uint256)\",\n            \"createProposal(address,bytes)\",\n            \"vote(uint256,bool)\",\n            \"executeProposal(uint256)\",\n            \"stake(uint256)\"\n        ],\n        \"MALO\": [\n            \"emergencyWithdraw()\",\n            \"claimRewards()\",\n            \"withdraw(uint256)\",\n            \"notifyRewardAmount(uint256)\",\n            \"stake(uint256)\"\n        ],\n        \"Staker\": [\n            \"withdraw(uint256)\",\n            \"stake(uint256)\",\n            \"addReward(address,uint256,uint256)\",\n            \"claimRewards(address)\"\n        ],\n        \"Staking\": [\n            \"claimRewards()\",\n            \"emergencyWithdraw()\",\n            \"withdraw(uint256)\",\n            \"notifyRewardAmount(uint256)\",\n            \"setRewardRate(uint256)\",\n            \"stake(uint256)\"\n        ],\n        \"Actor\": [\n            \"constructor(address[],address[])\",\n            \"proxy(address,bytes)\",\n            \"proxy(address,bytes,uint256)\",\n            \"revokeApproval(address,address)\"\n        ],\n        \"BeforeAfter\": [\n            \"failed()\",\n            \"setUp()\"\n        ],\n        \"CryticTester\": [\n            \"handler_setProtocolFee(uint256)\",\n            \"property_ContractSolvency()\",\n            \"handler_stake(uint256)\",\n            \"handler_emergencyWithdraw()\",\n            \"property_BalanceConsistency()\",\n            \"property_RewardPeriodState()\",\n            \"handler_setFeeRecipient(address)\",\n            \"setUp()\",\n            \"handler_setRewardRate(uint256)\",\n            \"failed()\",\n            \"handler_withdraw(uint256)\",\n            \"handler_claimRewards()\"\n        ],\n        \"Properties\": [\n            \"property_ContractSolvency()\",\n            \"property_BalanceConsistency()\",\n            \"property_RewardPeriodState()\",\n            \"setUp()\",\n            \"failed()\"\n        ],\n        \"TargetFunctions\": [\n            \"handler_setProtocolFee(uint256)\",\n            \"property_ContractSolvency()\",\n            \"handler_stake(uint256)\",\n            \"handler_emergencyWithdraw()\",\n            \"property_BalanceConsistency()\",\n            \"handler_setRewardRate(uint256)\",\n            \"property_RewardPeriodState()\",\n            \"setUp()\",\n            \"handler_setFeeRecipient(address)\",\n            \"handler_claimRewards()\",\n            \"failed()\",\n            \"handler_withdraw(uint256)\"\n        ]\n    },\n    \"use_balance\": {},\n    \"solc_versions\": [\n        \"0.8.23\"\n    ],\n    \"with_fallback\": [],\n    \"with_receive\": [\n        \"Actor\"\n    ]\n}", "markdown": "{\n    \"payable\": {\n        \"IMulticall3\": [\n            \"aggregate((address,bytes)[])\",\n            \"aggregate3((address,bool,bytes)[])\",\n            \"aggregate3Value((address,bool,uint256,bytes)[])\",\n            \"blockAndAggregate((address,bytes)[])\",\n            \"tryAggregate(bool,(address,bytes)[])\",\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\"\n        ],\n        \"Actor\": [\n            \"constructor(address[],address[])\",\n            \"()\"\n        ]\n    },\n    \"timestamp\": {\n        \"MALGovernanceStaking\": [\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"createProposal(address,bytes)\",\n            \"vote(uint256,bool)\",\n            \"executeProposal(uint256)\",\n            \"calculateRewards(address)\",\n            \"claimRewards()\",\n            \"cleanExpiredProposals()\",\n            \"activeProposals()\"\n        ],\n        \"MALO\": [\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"claimRewards()\",\n            \"notifyRewardAmount(uint256)\",\n            \"rewardPerToken()\",\n            \"earned(address)\"\n        ],\n        \"Staker\": [\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"claimRewards(address)\",\n            \"addReward(address,uint256,uint256)\",\n            \"removeRewardToken(address)\",\n            \"lastTimeRewardApplicable(address)\",\n            \"earned(address,address)\"\n        ],\n        \"Staking\": [\n            \"rewardPerToken()\",\n            \"earned(address)\",\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"claimRewards()\",\n            \"notifyRewardAmount(uint256)\",\n            \"setRewardRate(uint256)\",\n            \"setRewardPeriod(uint256)\"\n        ],\n        \"CryticTester\": [\n            \"property_RewardPeriodState()\"\n        ],\n        \"Properties\": [\n            \"property_RewardPeriodState()\"\n        ],\n        \"TargetFunctions\": [\n            \"property_RewardPeriodState()\"\n        ]\n    },\n    \"block_number\": {},\n    \"msg_sender\": {\n        \"AccessControl\": [\n            \"grantRole(bytes32,address)\",\n            \"revokeRole(bytes32,address)\",\n            \"renounceRole(bytes32,address)\"\n        ],\n        \"ERC20\": [\n            \"transfer(address,uint256)\",\n            \"approve(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"MALGovernanceStaking\": [\n            \"grantRole(bytes32,address)\",\n            \"revokeRole(bytes32,address)\",\n            \"renounceRole(bytes32,address)\",\n            \"constructor(address,address,address)\",\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"createProposal(address,bytes)\",\n            \"vote(uint256,bool)\",\n            \"claimRewards()\",\n            \"updateVotingPeriod(uint256)\",\n            \"updateQuorum(uint256)\",\n            \"setWithdrawalCooldown(uint256)\"\n        ],\n        \"MALO\": [\n            \"grantRole(bytes32,address)\",\n            \"revokeRole(bytes32,address)\",\n            \"renounceRole(bytes32,address)\",\n            \"constructor(address,address,address,address)\",\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"claimRewards()\",\n            \"notifyRewardAmount(uint256)\",\n            \"setFeeConfig(uint256,uint256,address)\",\n            \"setRewardDuration(uint256)\",\n            \"setAntiDumpParams(uint256,uint256)\",\n            \"emergencyWithdraw()\"\n        ],\n        \"Staker\": [\n            \"grantRole(bytes32,address)\",\n            \"revokeRole(bytes32,address)\",\n            \"renounceRole(bytes32,address)\",\n            \"constructor(address,address,address)\",\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"claimRewards(address)\",\n            \"addReward(address,uint256,uint256)\",\n            \"removeRewardToken(address)\"\n        ],\n        \"Staking\": [\n            \"grantRole(bytes32,address)\",\n            \"revokeRole(bytes32,address)\",\n            \"renounceRole(bytes32,address)\",\n            \"constructor(address,address,address,uint256,address)\",\n            \"stake(uint256)\",\n            \"withdraw(uint256)\",\n            \"claimRewards()\",\n            \"notifyRewardAmount(uint256)\",\n            \"setRewardRate(uint256)\",\n            \"setRewardPeriod(uint256)\",\n            \"setProtocolFee(uint256)\",\n            \"setFeeRecipient(address)\",\n            \"emergencyWithdraw()\"\n        ],\n        \"CryticTester\": [\n            \"handler_stake(uint256)\",\n            \"handler_withdraw(uint256)\",\n            \"handler_claimRewards()\",\n            \"handler_emergencyWithdraw()\"\n        ],\n        \"TargetFunctions\": [\n            \"handler_stake(uint256)\",\n            \"handler_withdraw(uint256)\",\n            \"handler_claimRewards()\",\n            \"handler_emergencyWithdraw()\"\n        ],\n        \"ERC20Mock\": [\n            \"transfer(address,uint256)\",\n            \"approve(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ]\n    },\n    \"msg_gas\": {},\n    \"assert\": {\n        \"CryticTester\": {\n            \"property_ContractSolvency()\": [\n                {\n                    \"start\": 499,\n                    \"length\": 13,\n                    \"filename_relative\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_absolute\": \"/workspaces/codespaces-blank/Malo-Labs/contracts/lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_short\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"is_dependency\": true,\n                    \"lines\": [\n                        19\n                    ],\n                    \"starting_column\": 13,\n                    \"ending_column\": 26\n                }\n            ],\n            \"property_BalanceConsistency()\": [\n                {\n                    \"start\": 1060,\n                    \"length\": 13,\n                    \"filename_relative\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_absolute\": \"/workspaces/codespaces-blank/Malo-Labs/contracts/lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_short\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"is_dependency\": true,\n                    \"lines\": [\n                        40\n                    ],\n                    \"starting_column\": 13,\n                    \"ending_column\": 26\n                }\n            ]\n        }\n    },\n    \"constant_functions\": {\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"stdError\": [\n            \"assertionError()\",\n            \"arithmeticError()\",\n            \"divisionError()\",\n            \"enumConversionError()\",\n            \"encodeStorageError()\",\n            \"popError()\",\n            \"indexOOBError()\",\n            \"memOverflowError()\",\n            \"zeroVarError()\"\n        ],\n        \"StdInvariant\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\"\n        ],\n        \"Test\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"VmSafe\": [\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"publicKeyP256(uint256)\",\n            \"signCompact(uint256,bytes32)\",\n            \"signCompact(bytes32)\",\n            \"signCompact(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"sign(bytes32)\",\n            \"sign(address,bytes32)\",\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envExists(string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"isContext(uint8)\",\n            \"addr(uint256)\",\n            \"getBlobBaseFee()\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"getStateDiff()\",\n            \"getStateDiffJson()\",\n            \"lastCallGas()\",\n            \"load(address,bytes32)\",\n            \"exists(string)\",\n            \"fsMetadata(string)\",\n            \"getArtifactPathByCode(bytes)\",\n            \"getArtifactPathByDeployedCode(bytes)\",\n            \"getBroadcast(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"getDeployment(string)\",\n            \"getDeployment(string,uint64)\",\n            \"getDeployments(string,uint64)\",\n            \"isDir(string)\",\n            \"isFile(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"unixTime()\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonTypeArray(string,string,string)\",\n            \"parseJsonType(string,string)\",\n            \"parseJsonType(string,string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"serializeJsonType(string,bytes)\",\n            \"keyExists(string,string)\",\n            \"indexOf(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"assumeNoRevert()\",\n            \"assumeNoRevert((address,bool,bytes))\",\n            \"assumeNoRevert((address,bool,bytes)[])\",\n            \"breakpoint(string)\",\n            \"breakpoint(string,bool)\",\n            \"getFoundryVersion()\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlTypeArray(string,string,string)\",\n            \"parseTomlType(string,string)\",\n            \"parseTomlType(string,string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"ensNamehash(string)\",\n            \"getLabel(address)\",\n            \"pauseTracing()\",\n            \"randomBool()\",\n            \"randomBytes(uint256)\",\n            \"randomBytes4()\",\n            \"randomBytes8()\",\n            \"randomInt()\",\n            \"randomInt(uint256)\",\n            \"randomUint(uint256)\",\n            \"resumeTracing()\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\"\n        ],\n        \"Vm\": [\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"publicKeyP256(uint256)\",\n            \"signCompact(uint256,bytes32)\",\n            \"signCompact(bytes32)\",\n            \"signCompact(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"sign(bytes32)\",\n            \"sign(address,bytes32)\",\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envExists(string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"isContext(uint8)\",\n            \"addr(uint256)\",\n            \"getBlobBaseFee()\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"getStateDiff()\",\n            \"getStateDiffJson()\",\n            \"lastCallGas()\",\n            \"load(address,bytes32)\",\n            \"exists(string)\",\n            \"fsMetadata(string)\",\n            \"getArtifactPathByCode(bytes)\",\n            \"getArtifactPathByDeployedCode(bytes)\",\n            \"getBroadcast(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"getDeployment(string)\",\n            \"getDeployment(string,uint64)\",\n            \"getDeployments(string,uint64)\",\n            \"isDir(string)\",\n            \"isFile(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"unixTime()\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonTypeArray(string,string,string)\",\n            \"parseJsonType(string,string)\",\n            \"parseJsonType(string,string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"serializeJsonType(string,bytes)\",\n            \"keyExists(string,string)\",\n            \"indexOf(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"assumeNoRevert()\",\n            \"assumeNoRevert((address,bool,bytes))\",\n            \"assumeNoRevert((address,bool,bytes)[])\",\n            \"breakpoint(string)\",\n            \"breakpoint(string,bool)\",\n            \"getFoundryVersion()\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlTypeArray(string,string,string)\",\n            \"parseTomlType(string,string)\",\n            \"parseTomlType(string,string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"ensNamehash(string)\",\n            \"getLabel(address)\",\n            \"pauseTracing()\",\n            \"randomBool()\",\n            \"randomBytes(uint256)\",\n            \"randomBytes4()\",\n            \"randomBytes8()\",\n            \"randomInt()\",\n            \"randomInt(uint256)\",\n            \"randomUint(uint256)\",\n            \"resumeTracing()\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\",\n            \"activeFork()\",\n            \"getBlobhashes()\",\n            \"isPersistent(address)\"\n        ],\n        \"IERC20\": [\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"IMulticall3\": [\n            \"getBasefee()\",\n            \"getBlockHash(uint256)\",\n            \"getBlockNumber()\",\n            \"getChainId()\",\n            \"getCurrentBlockCoinbase()\",\n            \"getCurrentBlockDifficulty()\",\n            \"getCurrentBlockGasLimit()\",\n            \"getCurrentBlockTimestamp()\",\n            \"getEthBalance(address)\",\n            \"getLastBlockHash()\"\n        ],\n        \"AccessControl\": [\n            \"supportsInterface(bytes4)\",\n            \"hasRole(bytes32,address)\",\n            \"getRoleAdmin(bytes32)\",\n            \"DEFAULT_ADMIN_ROLE()\"\n        ],\n        \"IAccessControl\": [\n            \"hasRole(bytes32,address)\",\n            \"getRoleAdmin(bytes32)\"\n        ],\n        \"IVotes\": [\n            \"getVotes(address)\",\n            \"getPastVotes(address,uint256)\",\n            \"getPastTotalSupply(uint256)\",\n            \"delegates(address)\"\n        ],\n        \"IERC1363\": [\n            \"supportsInterface(bytes4)\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"ERC20\": [\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"IERC20Metadata\": [\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\"\n        ],\n        \"Pausable\": [\n            \"paused()\"\n        ],\n        \"ERC165\": [\n            \"supportsInterface(bytes4)\"\n        ],\n        \"IERC165\": [\n            \"supportsInterface(bytes4)\"\n        ],\n        \"MALGovernanceStaking\": [\n            \"paused()\",\n            \"supportsInterface(bytes4)\",\n            \"hasRole(bytes32,address)\",\n            \"getRoleAdmin(bytes32)\",\n            \"calculateRewards(address)\",\n            \"getVotingPower(address)\",\n            \"totalStaked()\",\n            \"stakedBalance(address)\",\n            \"activeProposals()\",\n            \"DEFAULT_ADMIN_ROLE()\",\n            \"GOVERNANCE_ADMIN_ROLE()\",\n            \"POLICY_MANAGER_ROLE()\",\n            \"malGovernanceToken()\",\n            \"malUtilityToken()\",\n            \"votingPeriod()\",\n            \"proposalThreshold()\",\n            \"quorumPercentage()\",\n            \"withdrawalCooldown()\",\n            \"proposalLifetime()\",\n            \"rewardRate()\",\n            \"lastStakeTime(address)\",\n            \"proposals(uint256)\",\n            \"hasVoted(address,uint256)\",\n            \"proposalCount()\"\n        ],\n        \"MALO\": [\n            \"paused()\",\n            \"supportsInterface(bytes4)\",\n            \"hasRole(bytes32,address)\",\n            \"getRoleAdmin(bytes32)\",\n            \"rewardPerToken()\",\n            \"earned(address)\",\n            \"totalStaked()\",\n            \"DEFAULT_ADMIN_ROLE()\",\n            \"REWARDS_ADMIN_ROLE()\",\n            \"LIQUIDITY_GUARDIAN_ROLE()\",\n            \"stakingToken()\",\n            \"malToken()\",\n            \"rewardDuration()\",\n            \"rewardRate()\",\n            \"periodFinish()\",\n            \"lastUpdateTime()\",\n            \"rewardPerTokenStored()\",\n            \"lastStakeTime(address)\",\n            \"userRewardPerTokenPaid(address)\",\n            \"rewards(address)\",\n            \"vestingStart(address)\",\n            \"totalVested(address)\",\n            \"claimLockPeriod()\",\n            \"maxDailyClaimPercent()\",\n            \"withdrawalFeeBps()\",\n            \"MAX_FEE_BPS()\",\n            \"feeReceiver()\"\n        ],\n        \"RewardsDistributionRecipient\": [\n            \"rewardsDistribution()\",\n            \"maloToken()\"\n        ],\n        \"Staker\": [\n            \"paused()\",\n            \"supportsInterface(bytes4)\",\n            \"hasRole(bytes32,address)\",\n            \"getRoleAdmin(bytes32)\",\n            \"lastTimeRewardApplicable(address)\",\n            \"earned(address,address)\",\n            \"totalStaked()\",\n            \"stakedBalanceOf(address)\",\n            \"DEFAULT_ADMIN_ROLE()\",\n            \"REWARDS_ADMIN_ROLE()\",\n            \"PAUSE_GUARDIAN_ROLE()\",\n            \"stakingToken()\",\n            \"rewardTokens(uint256)\",\n            \"isRewardToken(address)\",\n            \"rewards(address)\",\n            \"userRewardPerTokenPaid(address,address)\",\n            \"rewardsEarned(address,address)\"\n        ],\n        \"Staking\": [\n            \"paused()\",\n            \"supportsInterface(bytes4)\",\n            \"hasRole(bytes32,address)\",\n            \"getRoleAdmin(bytes32)\",\n            \"rewardPerToken()\",\n            \"earned(address)\",\n            \"totalStaked()\",\n            \"balanceOf(address)\",\n            \"getRewardForDuration()\",\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\",\n            \"DEFAULT_ADMIN_ROLE()\",\n            \"rewardsDistribution()\",\n            \"maloToken()\",\n            \"FEE_SETTER_ROLE()\",\n            \"stakingToken()\",\n            \"feeRecipient()\",\n            \"periodFinish()\",\n            \"rewardRate()\",\n            \"lastUpdateTime()\",\n            \"rewardPerTokenStored()\",\n            \"protocolFee()\",\n            \"rewardPeriod()\",\n            \"totalRewardsDistributed()\",\n            \"userRewardPerTokenPaid(address)\",\n            \"rewards(address)\",\n            \"rewardsClaimed(address)\"\n        ],\n        \"Actor\": [\n            \"getApprovedTokens()\",\n            \"getApprovedContracts()\",\n            \"lastTarget()\",\n            \"allowances(address,address)\"\n        ],\n        \"BeforeAfter\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\",\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\",\n            \"staking()\",\n            \"stakingToken()\",\n            \"maloToken()\",\n            \"owner()\",\n            \"feeRecipient()\"\n        ],\n        \"Constants\": [\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\"\n        ],\n        \"CryticTester\": [\n            \"property_RewardPeriodState()\",\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\",\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\",\n            \"staking()\",\n            \"stakingToken()\",\n            \"maloToken()\",\n            \"owner()\",\n            \"feeRecipient()\"\n        ],\n        \"Ghosts\": [\n            \"staking()\",\n            \"stakingToken()\",\n            \"rewardToken()\"\n        ],\n        \"Properties\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"property_ContractSolvency()\",\n            \"property_BalanceConsistency()\",\n            \"property_RewardPeriodState()\",\n            \"IS_TEST()\",\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\",\n            \"staking()\",\n            \"stakingToken()\",\n            \"maloToken()\",\n            \"owner()\",\n            \"feeRecipient()\"\n        ],\n        \"Setup\": [\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\",\n            \"stakingToken()\",\n            \"maloToken()\",\n            \"staking()\",\n            \"defaultGovernance()\",\n            \"techOpsMultisig()\"\n        ],\n        \"TargetFunctions\": [\n            \"property_ContractSolvency()\",\n            \"property_BalanceConsistency()\",\n            \"property_RewardPeriodState()\",\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\",\n            \"FEE_MANAGER_ROLE()\",\n            \"FEE_COLLECTOR_ROLE()\",\n            \"DEV_ROLE()\",\n            \"PAUSER_ROLE()\",\n            \"GOVERNANCE_ROLE()\",\n            \"PRECISION_FACTOR()\",\n            \"staking()\",\n            \"stakingToken()\",\n            \"maloToken()\",\n            \"owner()\",\n            \"feeRecipient()\"\n        ],\n        \"ERC20Mock\": [\n            \"name()\",\n            \"symbol()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"decimals()\"\n        ]\n    },\n    \"constants_used\": {\n        \"StdAssertions\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"Test\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"AccessControl\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2036718347\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ],\n            \"grantRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"revokeRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"renounceRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20\": {\n            \"decimals()\": [\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ]\n        },\n        \"ERC165\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ]\n        },\n        \"MALGovernanceStaking\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2036718347\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ],\n            \"grantRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"revokeRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"renounceRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"constructor(address,address,address)\": [\n                [\n                    {\n                        \"value\": \"GOVERNANCE_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b\\\"\\\\xe7\\\\xe0\\\\xb3\\\\x01\\\\xde\\\\x1c\\\\x1e&\\\\x80s\\\\xa6\\\\xb5o\\\\xf0\\\\x87l\\\\xff\\\\xca\\\\x0b\\\\xec\\\\xba\\\\r\\\\xca\\\\x08\\\\xf9E\\\\xc19N>\\\\x97'\\\"\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"POLICY_MANAGER_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b\\\"'$\\\\xe1\\\\xc9c\\\\xeb\\\\x14e\\\\xb5\\\\x120\\\\x91\\\\r,\\\\xa7\\\\xbet\\\\xb7\\\\x18\\\\x83\\\\xf8\\\\xca\\\\xb7 v\\\\xd8\\\\xc1.\\\\x08l+H\\\"\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"stake(uint256)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"withdraw(uint256)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"172800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"createProposal(address,bytes)\": [\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"vote(uint256,bool)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"executeProposal(uint256)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"calculateRewards(address)\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimRewards()\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"updateVotingPeriod(uint256)\": [\n                [\n                    {\n                        \"value\": \"POLICY_MANAGER_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"votingPeriod\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b\\\"'$\\\\xe1\\\\xc9c\\\\xeb\\\\x14e\\\\xb5\\\\x120\\\\x91\\\\r,\\\\xa7\\\\xbet\\\\xb7\\\\x18\\\\x83\\\\xf8\\\\xca\\\\xb7 v\\\\xd8\\\\xc1.\\\\x08l+H\\\"\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"updateQuorum(uint256)\": [\n                [\n                    {\n                        \"value\": \"b\\\"\\\\xe7\\\\xe0\\\\xb3\\\\x01\\\\xde\\\\x1c\\\\x1e&\\\\x80s\\\\xa6\\\\xb5o\\\\xf0\\\\x87l\\\\xff\\\\xca\\\\x0b\\\\xec\\\\xba\\\\r\\\\xca\\\\x08\\\\xf9E\\\\xc19N>\\\\x97'\\\"\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"GOVERNANCE_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"quorumPercentage\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setWithdrawalCooldown(uint256)\": [\n                [\n                    {\n                        \"value\": \"GOVERNANCE_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"withdrawalCooldown\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b\\\"\\\\xe7\\\\xe0\\\\xb3\\\\x01\\\\xde\\\\x1c\\\\x1e&\\\\x80s\\\\xa6\\\\xb5o\\\\xf0\\\\x87l\\\\xff\\\\xca\\\\x0b\\\\xec\\\\xba\\\\r\\\\xca\\\\x08\\\\xf9E\\\\xc19N>\\\\x97'\\\"\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"cleanExpiredProposals()\": [\n                [\n                    {\n                        \"value\": \"2592000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"activeProposals()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"MALO\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2036718347\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ],\n            \"grantRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"revokeRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"renounceRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"constructor(address,address,address,address)\": [\n                [\n                    {\n                        \"value\": \"Zero address\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid roles\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xf6\\\\xcae|`\\\\x04\\\\xe5\\\\x17\\\\x8d\\\\x97\\\\xdf\\\\x82\\\\x94\\\\xc5`q\\\\x92\\\\x8f\\\\x00J\\\\xe5\\\\xd4\\\\xf6\\\\x8c\\\\xba\\\\xcb\\\\xd0\\\\x0b\\\\xd4\\\\xd1\\\\xc6\\\\xe2'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REWARDS_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xdbo\\\\xba\\\\xe5\\\\xcd\\\\x13\\\\xd8&M~\\\\xd1\\\"\\\\x19\\\\xef(\\\\x82\\\\xc1\\\\xe8;\\\\x8b\\\\x12\\\\xf4x\\\\x19\\\\xba\\\\xa9o2\\\\xf6\\\\x9a\\\\x16\\\\x82'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"LIQUIDITY_GUARDIAN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"stake(uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot stake 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"withdraw(uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid amount\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"86400\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimRewards()\": [\n                [\n                    {\n                        \"value\": \"Vesting active\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"No rewards\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"86400\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"notifyRewardAmount(uint256)\": [\n                [\n                    {\n                        \"value\": \"No reward\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Reward too small\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REWARDS_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xdbo\\\\xba\\\\xe5\\\\xcd\\\\x13\\\\xd8&M~\\\\xd1\\\"\\\\x19\\\\xef(\\\\x82\\\\xc1\\\\xe8;\\\\x8b\\\\x12\\\\xf4x\\\\x19\\\\xba\\\\xa9o2\\\\xf6\\\\x9a\\\\x16\\\\x82'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"604800\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setFeeConfig(uint256,uint256,address)\": [\n                [\n                    {\n                        \"value\": \"Fee too high\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid receiver\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xf6\\\\xcae|`\\\\x04\\\\xe5\\\\x17\\\\x8d\\\\x97\\\\xdf\\\\x82\\\\x94\\\\xc5`q\\\\x92\\\\x8f\\\\x00J\\\\xe5\\\\xd4\\\\xf6\\\\x8c\\\\xba\\\\xcb\\\\xd0\\\\x0b\\\\xd4\\\\xd1\\\\xc6\\\\xe2'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"LIQUIDITY_GUARDIAN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setRewardDuration(uint256)\": [\n                [\n                    {\n                        \"value\": \"Invalid duration\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REWARDS_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xdbo\\\\xba\\\\xe5\\\\xcd\\\\x13\\\\xd8&M~\\\\xd1\\\"\\\\x19\\\\xef(\\\\x82\\\\xc1\\\\xe8;\\\\x8b\\\\x12\\\\xf4x\\\\x19\\\\xba\\\\xa9o2\\\\xf6\\\\x9a\\\\x16\\\\x82'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setAntiDumpParams(uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"LIQUIDITY_GUARDIAN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xf6\\\\xcae|`\\\\x04\\\\xe5\\\\x17\\\\x8d\\\\x97\\\\xdf\\\\x82\\\\x94\\\\xc5`q\\\\x92\\\\x8f\\\\x00J\\\\xe5\\\\xd4\\\\xf6\\\\x8c\\\\xba\\\\xcb\\\\xd0\\\\x0b\\\\xd4\\\\xd1\\\\xc6\\\\xe2'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid percentage\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"emergencyWithdraw()\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"No stake\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"rewardPerToken()\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"earned(address)\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Staker\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2036718347\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ],\n            \"grantRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"revokeRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"renounceRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"constructor(address,address,address)\": [\n                [\n                    {\n                        \"value\": \"Invalid admin address\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PAUSE_GUARDIAN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b';\\\\xb1\\\\x81\\\\xd5h\\\\x91d\\\\xb4\\\\xd7-4\\\\xb0V\\\"\\\\x8c\\\\x95\\\\xb5\\\\x1f?\\\\xb0\\\\xf6\\\\xdb\\\\xdb\\\\x7f\\\\x9d\\\\xdb\\\\xa5\\\\xf9\\\\x1ch!\\\\xdd'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REWARDS_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid pause guardian\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xdbo\\\\xba\\\\xe5\\\\xcd\\\\x13\\\\xd8&M~\\\\xd1\\\"\\\\x19\\\\xef(\\\\x82\\\\xc1\\\\xe8;\\\\x8b\\\\x12\\\\xf4x\\\\x19\\\\xba\\\\xa9o2\\\\xf6\\\\x9a\\\\x16\\\\x82'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid staking token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"stake(uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot stake 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"withdraw(uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Cannot withdraw 0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Insufficient balance\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"claimRewards(address)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"No rewards to claim\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"addReward(address,uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TotalRewards must be divisible by duration\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REWARDS_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid reward token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xdbo\\\\xba\\\\xe5\\\\xcd\\\\x13\\\\xd8&M~\\\\xd1\\\"\\\\x19\\\\xef(\\\\x82\\\\xc1\\\\xe8;\\\\x8b\\\\x12\\\\xf4x\\\\x19\\\\xba\\\\xa9o2\\\\xf6\\\\x9a\\\\x16\\\\x82'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Previous reward ongoing\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid parameters\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"removeRewardToken(address)\": [\n                [\n                    {\n                        \"value\": \"Reward ongoing\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Not a reward token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REWARDS_ADMIN_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xdbo\\\\xba\\\\xe5\\\\xcd\\\\x13\\\\xd8&M~\\\\xd1\\\"\\\\x19\\\\xef(\\\\x82\\\\xc1\\\\xe8;\\\\x8b\\\\x12\\\\xf4x\\\\x19\\\\xba\\\\xa9o2\\\\xf6\\\\x9a\\\\x16\\\\x82'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"earned(address,address)\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Staking\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2036718347\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ],\n            \"grantRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"revokeRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"renounceRole(bytes32,address)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"constructor(address,address,address,uint256,address)\": [\n                [\n                    {\n                        \"value\": \"b'e\\\\xd7\\\\xa2\\\\x8e2e\\\\xb3zdt\\\\x92\\\\x9f3e!\\\\xb32\\\\xc1h\\\\x1b\\\\x93?l\\\\xb9\\\\xf37fsD\\\\r\\\\x86*'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xe6\\\\xad\\\\x9aG\\\\xfb\\\\xda\\\\x1d\\\\xc1\\\\x8d\\\\xe1\\\\xeb^\\\\xeb}\\\\x93^^\\\\x81\\\\xb4t\\\\x8f<\\\\xfca\\\\xe23\\\\xe6O\\\\x88\\\\x18 `'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PAUSER_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"FEE_SETTER_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"rewardPerToken()\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"earned(address)\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"stake(uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"withdraw(uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"claimRewards()\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"notifyRewardAmount(uint256)\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Caller is not RewardsDistribution\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setRewardRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Caller is not RewardsDistribution\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setRewardPeriod(uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setProtocolFee(uint256)\": [\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"b'\\\\xe6\\\\xad\\\\x9aG\\\\xfb\\\\xda\\\\x1d\\\\xc1\\\\x8d\\\\xe1\\\\xeb^\\\\xeb}\\\\x93^^\\\\x81\\\\xb4t\\\\x8f<\\\\xfca\\\\xe23\\\\xe6O\\\\x88\\\\x18 `'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"FEE_SETTER_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setFeeRecipient(address)\": [\n                [\n                    {\n                        \"value\": \"b'\\\\xe6\\\\xad\\\\x9aG\\\\xfb\\\\xda\\\\x1d\\\\xc1\\\\x8d\\\\xe1\\\\xeb^\\\\xeb}\\\\x93^^\\\\x81\\\\xb4t\\\\x8f<\\\\xfca\\\\xe23\\\\xe6O\\\\x88\\\\x18 `'\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"FEE_SETTER_ROLE\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"emergencyWithdraw()\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Actor\": {\n            \"constructor(address[],address[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"proxy(address,bytes)\": [\n                [\n                    {\n                        \"value\": \"147028384\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Unknown error\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1313373041\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Panic: \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"proxy(address,bytes,uint256)\": [\n                [\n                    {\n                        \"value\": \"147028384\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Unknown error\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1313373041\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Panic: \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"revokeApproval(address,address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"BeforeAfter\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"MALO\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"291\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"STK\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1209600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Staking Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Malo Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"CryticTester\": {\n            \"handler_stake(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_withdraw(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_claimRewards()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_setRewardRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_setProtocolFee(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_setFeeRecipient(address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_emergencyWithdraw()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"property_ContractSolvency()\": [\n                [\n                    {\n                        \"value\": \"Contract must remain solvent\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"property_BalanceConsistency()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1008707306819937145937943608908430687638506176512\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"User balances must match total staked\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"919791448120245735144748008190597589268974010368\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"property_RewardPeriodState()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Reward rate must be positive during active period\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Reward rate must be zero after period ends\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"MALO\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"291\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"STK\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1209600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Staking Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Malo Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"Properties\": {\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"MALO\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1209600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"STK\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"291\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Staking Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Malo Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"property_ContractSolvency()\": [\n                [\n                    {\n                        \"value\": \"Contract must remain solvent\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"property_BalanceConsistency()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1008707306819937145937943608908430687638506176512\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"User balances must match total staked\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"919791448120245735144748008190597589268974010368\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"property_RewardPeriodState()\": [\n                [\n                    {\n                        \"value\": \"Reward rate must be positive during active period\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Reward rate must be zero after period ends\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"TargetFunctions\": {\n            \"property_ContractSolvency()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Contract must remain solvent\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"property_BalanceConsistency()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1008707306819937145937943608908430687638506176512\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"User balances must match total staked\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"919791448120245735144748008190597589268974010368\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"property_RewardPeriodState()\": [\n                [\n                    {\n                        \"value\": \"Reward rate must be positive during active period\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Reward rate must be zero after period ends\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"MALO\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"291\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"STK\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1209600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Staking Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Malo Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"handler_stake(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_withdraw(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_claimRewards()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_setRewardRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_setProtocolFee(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_setFeeRecipient(address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"handler_emergencyWithdraw()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20Mock\": {\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"mint(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"decimals()\": [\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint8\"\n                    }\n                ]\n            ]\n        }\n    },\n    \"constants_used_in_binary\": {\n        \"MALGovernanceStaking\": {\n            \"stake(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"createProposal(address,bytes)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"vote(uint256,bool)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"executeProposal(uint256)\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"calculateRewards(address)\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewards()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"updateQuorum(uint256)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"cleanExpiredProposals()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"activeProposals()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"MALO\": {\n            \"stake(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewards()\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"notifyRewardAmount(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setRewardDuration(uint256)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setAntiDumpParams(uint256,uint256)\": {\n                \"BinaryType.LESS_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"emergencyWithdraw()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"rewardPerToken()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"earned(address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"Staker\": {\n            \"stake(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewards(address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"addReward(address,uint256,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"removeRewardToken(address)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"earned(address,address)\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"Staking\": {\n            \"constructor(address,address,address,uint256,address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"rewardPerToken()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"earned(address)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"stake(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"claimRewards()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"notifyRewardAmount(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setRewardRate(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setRewardPeriod(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setProtocolFee(uint256)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"emergencyWithdraw()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"Actor\": {\n            \"constructor(address[],address[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"proxy(address,bytes)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"147028384\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1313373041\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"proxy(address,bytes,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"147028384\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1313373041\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticTester\": {\n            \"handler_stake(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"handler_withdraw(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"handler_claimRewards()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"property_BalanceConsistency()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"property_RewardPeriodState()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"Properties\": {\n            \"property_BalanceConsistency()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"property_RewardPeriodState()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"TargetFunctions\": {\n            \"property_BalanceConsistency()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"property_RewardPeriodState()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"handler_stake(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"handler_withdraw(uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"handler_claimRewards()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        }\n    },\n    \"functions_relations\": {\n        \"Asserts\": {},\n        \"BaseProperties\": {},\n        \"BaseSetup\": {},\n        \"BaseTargetFunctions\": {},\n        \"CryticAsserts\": {},\n        \"IHevm\": {\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"CommonBase\": {},\n        \"TestBase\": {},\n        \"ScriptBase\": {},\n        \"StdAssertions\": {\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"StdChains\": {},\n        \"StdCheatsSafe\": {},\n        \"StdCheats\": {},\n        \"StdConstants\": {},\n        \"stdError\": {},\n        \"StdInvariant\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"stdJson\": {},\n        \"stdMath\": {},\n        \"stdStorageSafe\": {},\n        \"stdStorage\": {},\n        \"StdStyle\": {},\n        \"stdToml\": {},\n        \"StdUtils\": {},\n        \"Test\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"VmSafe\": {\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"publicKeyP256(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envExists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isContext(uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobBaseFee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiffJson()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"lastCallGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByDeployedCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcast(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployments(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prompt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecret(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecretUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUintToHex(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachDelegation((uint8,bytes32,bytes32,uint64,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcastRawTransaction(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getWallets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"contains(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"indexOf(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getFoundryVersion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyStorage(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ensNamehash(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomAddress()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes4()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes8()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Vm\": {\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"publicKeyP256(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envExists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isContext(uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobBaseFee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiffJson()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"lastCallGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByDeployedCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcast(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployments(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prompt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecret(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecretUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUintToHex(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachDelegation((uint8,bytes32,bytes32,uint64,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcastRawTransaction(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getWallets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"contains(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"indexOf(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getFoundryVersion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyStorage(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ensNamehash(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomAddress()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes4()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes8()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowCheatcodes(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blobBaseFee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blobhashes(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"chainId(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"clearMockedCalls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cloneAccount(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"coinbase(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteStateSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteStateSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"difficulty(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"dumpState(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobhashes()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isPersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"loadAllocs(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCalls(address,bytes,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCalls(address,uint256,bytes,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockFunction(address,address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readCallers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToState(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToStateAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setBlockhash(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonce(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonceUnsafe(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotGasLastCall(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotGasLastCall(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotState()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotValue(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotValue(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startSnapshotGas(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startSnapshotGas(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"txGasPrice(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertTo(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(bool,bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(bool,bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectPartialRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectPartialRevert(bytes4,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemory(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemoryCall(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopExpectSafeMemory()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"console\": {},\n        \"IERC20\": {\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IMulticall3\": {\n            \"aggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3Value((address,bool,uint256,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blockAndAggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBasefee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockHash(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChainId()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockCoinbase()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockDifficulty()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockGasLimit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getEthBalance(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLastBlockHash()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"safeconsole\": {},\n        \"AccessControl\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hasRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ]\n            },\n            \"getRoleAdmin(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ]\n            },\n            \"grantRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ]\n            },\n            \"revokeRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ]\n            },\n            \"renounceRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\"\n                ]\n            }\n        },\n        \"IAccessControl\": {\n            \"hasRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRoleAdmin(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"grantRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokeRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"renounceRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IVotes\": {\n            \"getVotes(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getPastVotes(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getPastTotalSupply(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"delegates(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"delegate(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC1363\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferAndCall(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferAndCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFromAndCall(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFromAndCall(address,address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approveAndCall(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approveAndCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC20Errors\": {},\n        \"IERC721Errors\": {},\n        \"IERC1155Errors\": {},\n        \"ERC20\": {\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"totalSupply()\",\n                    \"balanceOf(address)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"allowance(address,address)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"totalSupply()\",\n                    \"balanceOf(address)\",\n                    \"transfer(address,uint256)\",\n                    \"allowance(address,address)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            }\n        },\n        \"IERC20Metadata\": {\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"SafeERC20\": {},\n        \"Arrays\": {},\n        \"Comparators\": {},\n        \"Context\": {},\n        \"Panic\": {},\n        \"Pausable\": {\n            \"paused()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ReentrancyGuard\": {},\n        \"SlotDerivation\": {},\n        \"StorageSlot\": {},\n        \"ERC165\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC165\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Math\": {},\n        \"SafeCast\": {},\n        \"EnumerableSet\": {},\n        \"MALGovernanceStaking\": {\n            \"paused()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hasRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"getRoleAdmin(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"grantRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"updateVotingPeriod(uint256)\",\n                    \"updateQuorum(uint256)\",\n                    \"setWithdrawalCooldown(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"revokeRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"updateVotingPeriod(uint256)\",\n                    \"updateQuorum(uint256)\",\n                    \"setWithdrawalCooldown(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"renounceRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"updateVotingPeriod(uint256)\",\n                    \"updateQuorum(uint256)\",\n                    \"setWithdrawalCooldown(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"constructor(address,address,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"createProposal(address,bytes)\",\n                    \"vote(uint256,bool)\",\n                    \"claimRewards()\",\n                    \"updateVotingPeriod(uint256)\",\n                    \"updateQuorum(uint256)\",\n                    \"setWithdrawalCooldown(uint256)\",\n                    \"getVotingPower(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"stake(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"executeProposal(uint256)\",\n                    \"calculateRewards(address)\",\n                    \"claimRewards()\",\n                    \"totalStaked()\",\n                    \"stakedBalance(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"executeProposal(uint256)\",\n                    \"claimRewards()\"\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"executeProposal(uint256)\",\n                    \"calculateRewards(address)\",\n                    \"claimRewards()\",\n                    \"totalStaked()\",\n                    \"stakedBalance(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"executeProposal(uint256)\",\n                    \"claimRewards()\",\n                    \"setWithdrawalCooldown(uint256)\"\n                ]\n            },\n            \"createProposal(address,bytes)\": {\n                \"impacts\": [\n                    \"createProposal(address,bytes)\",\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"cleanExpiredProposals()\",\n                    \"activeProposals()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"createProposal(address,bytes)\",\n                    \"updateVotingPeriod(uint256)\"\n                ]\n            },\n            \"vote(uint256,bool)\": {\n                \"impacts\": [\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"cleanExpiredProposals()\",\n                    \"activeProposals()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"createProposal(address,bytes)\",\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"cleanExpiredProposals()\"\n                ]\n            },\n            \"executeProposal(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"claimRewards()\",\n                    \"cleanExpiredProposals()\",\n                    \"activeProposals()\"\n                ],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"createProposal(address,bytes)\",\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"claimRewards()\",\n                    \"updateQuorum(uint256)\",\n                    \"cleanExpiredProposals()\"\n                ]\n            },\n            \"calculateRewards(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\"\n                ]\n            },\n            \"claimRewards()\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"executeProposal(uint256)\",\n                    \"calculateRewards(address)\",\n                    \"claimRewards()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"executeProposal(uint256)\",\n                    \"claimRewards()\"\n                ]\n            },\n            \"updateVotingPeriod(uint256)\": {\n                \"impacts\": [\n                    \"createProposal(address,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"updateQuorum(uint256)\": {\n                \"impacts\": [\n                    \"executeProposal(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"setWithdrawalCooldown(uint256)\": {\n                \"impacts\": [\n                    \"withdraw(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"cleanExpiredProposals()\": {\n                \"impacts\": [\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"cleanExpiredProposals()\",\n                    \"activeProposals()\"\n                ],\n                \"is_impacted_by\": [\n                    \"createProposal(address,bytes)\",\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"cleanExpiredProposals()\"\n                ]\n            },\n            \"getVotingPower(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"totalStaked()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\"\n                ]\n            },\n            \"stakedBalance(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\"\n                ]\n            },\n            \"activeProposals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"createProposal(address,bytes)\",\n                    \"vote(uint256,bool)\",\n                    \"executeProposal(uint256)\",\n                    \"cleanExpiredProposals()\"\n                ]\n            }\n        },\n        \"MALO\": {\n            \"paused()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hasRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"getRoleAdmin(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"grantRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setFeeConfig(uint256,uint256,address)\",\n                    \"setRewardDuration(uint256)\",\n                    \"setAntiDumpParams(uint256,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"revokeRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setFeeConfig(uint256,uint256,address)\",\n                    \"setRewardDuration(uint256)\",\n                    \"setAntiDumpParams(uint256,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"renounceRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setFeeConfig(uint256,uint256,address)\",\n                    \"setRewardDuration(uint256)\",\n                    \"setAntiDumpParams(uint256,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"constructor(address,address,address,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setFeeConfig(uint256,uint256,address)\",\n                    \"setRewardDuration(uint256)\",\n                    \"setAntiDumpParams(uint256,uint256)\",\n                    \"emergencyWithdraw()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"stake(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"totalStaked()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"totalStaked()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setFeeConfig(uint256,uint256,address)\",\n                    \"setAntiDumpParams(uint256,uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"claimRewards()\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"rewardPerToken()\",\n                    \"earned(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setFeeConfig(uint256,uint256,address)\",\n                    \"setAntiDumpParams(uint256,uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"notifyRewardAmount(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"rewardPerToken()\",\n                    \"earned(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardDuration(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"setFeeConfig(uint256,uint256,address)\": {\n                \"impacts\": [\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"setRewardDuration(uint256)\": {\n                \"impacts\": [\n                    \"notifyRewardAmount(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"setAntiDumpParams(uint256,uint256)\": {\n                \"impacts\": [\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,address)\"\n                ]\n            },\n            \"emergencyWithdraw()\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"totalStaked()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"rewardPerToken()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"earned(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"totalStaked()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            }\n        },\n        \"RewardsDistributionRecipient\": {\n            \"notifyRewardAmount(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setRewardsDistribution(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Staker\": {\n            \"paused()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hasRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"getRoleAdmin(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"grantRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"revokeRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"renounceRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"constructor(address,address,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"stake(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\",\n                    \"lastTimeRewardApplicable(address)\",\n                    \"earned(address,address)\",\n                    \"totalStaked()\",\n                    \"stakedBalanceOf(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\",\n                    \"lastTimeRewardApplicable(address)\",\n                    \"earned(address,address)\",\n                    \"totalStaked()\",\n                    \"stakedBalanceOf(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ]\n            },\n            \"claimRewards(address)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\",\n                    \"lastTimeRewardApplicable(address)\",\n                    \"earned(address,address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ]\n            },\n            \"addReward(address,uint256,uint256)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\",\n                    \"lastTimeRewardApplicable(address)\",\n                    \"earned(address,address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ]\n            },\n            \"removeRewardToken(address)\": {\n                \"impacts\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\",\n                    \"removeRewardToken(address)\"\n                ]\n            },\n            \"lastTimeRewardApplicable(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\"\n                ]\n            },\n            \"earned(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards(address)\",\n                    \"addReward(address,uint256,uint256)\"\n                ]\n            },\n            \"totalStaked()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\"\n                ]\n            },\n            \"stakedBalanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\"\n                ]\n            }\n        },\n        \"Staking\": {\n            \"setRewardsDistribution(address)\": {\n                \"impacts\": [\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"paused()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hasRole(bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"getRoleAdmin(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"grantRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"setProtocolFee(uint256)\",\n                    \"setFeeRecipient(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"revokeRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"setProtocolFee(uint256)\",\n                    \"setFeeRecipient(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"renounceRole(bytes32,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"setProtocolFee(uint256)\",\n                    \"setFeeRecipient(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"constructor(address,address,address,uint256,address)\": {\n                \"impacts\": [\n                    \"hasRole(bytes32,address)\",\n                    \"getRoleAdmin(bytes32)\",\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"setProtocolFee(uint256)\",\n                    \"setFeeRecipient(address)\",\n                    \"emergencyWithdraw()\",\n                    \"getRewardForDuration()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"rewardPerToken()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"earned(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"stake(uint256)\": {\n                \"impacts\": [\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"totalStaked()\",\n                    \"balanceOf(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"withdraw(uint256)\": {\n                \"impacts\": [\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"totalStaked()\",\n                    \"balanceOf(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"claimRewards()\": {\n                \"impacts\": [\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setProtocolFee(uint256)\",\n                    \"setFeeRecipient(address)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"notifyRewardAmount(uint256)\": {\n                \"impacts\": [\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"getRewardForDuration()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setRewardsDistribution(address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"setRewardRate(uint256)\": {\n                \"impacts\": [\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"getRewardForDuration()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setRewardsDistribution(address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setRewardPeriod(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"setRewardPeriod(uint256)\": {\n                \"impacts\": [\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"getRewardForDuration()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\"\n                ]\n            },\n            \"setProtocolFee(uint256)\": {\n                \"impacts\": [\n                    \"claimRewards()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"setFeeRecipient(address)\": {\n                \"impacts\": [\n                    \"claimRewards()\"\n                ],\n                \"is_impacted_by\": [\n                    \"grantRole(bytes32,address)\",\n                    \"revokeRole(bytes32,address)\",\n                    \"renounceRole(bytes32,address)\",\n                    \"constructor(address,address,address,uint256,address)\"\n                ]\n            },\n            \"emergencyWithdraw()\": {\n                \"impacts\": [\n                    \"rewardPerToken()\",\n                    \"earned(address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\",\n                    \"totalStaked()\",\n                    \"balanceOf(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"claimRewards()\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"totalStaked()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"stake(uint256)\",\n                    \"withdraw(uint256)\",\n                    \"emergencyWithdraw()\"\n                ]\n            },\n            \"getRewardForDuration()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256,address)\",\n                    \"notifyRewardAmount(uint256)\",\n                    \"setRewardRate(uint256)\",\n                    \"setRewardPeriod(uint256)\"\n                ]\n            }\n        },\n        \"Errors\": {},\n        \"Actor\": {\n            \"constructor(address[],address[])\": {\n                \"impacts\": [\n                    \"constructor(address[],address[])\",\n                    \"getApprovedTokens()\",\n                    \"getApprovedContracts()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address[],address[])\",\n                    \"revokeApproval(address,address)\"\n                ]\n            },\n            \"proxy(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"proxy(address,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokeApproval(address,address)\": {\n                \"impacts\": [\n                    \"constructor(address[],address[])\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"getApprovedTokens()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address[],address[])\"\n                ]\n            },\n            \"getApprovedContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address[],address[])\"\n                ]\n            },\n            \"()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"BeforeAfter\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"Constants\": {},\n        \"CryticTester\": {\n            \"handler_stake(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_withdraw(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_claimRewards()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_setRewardRate(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_setProtocolFee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_setFeeRecipient(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_emergencyWithdraw()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_ContractSolvency()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_BalanceConsistency()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_RewardPeriodState()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"handler_stake(uint256)\",\n                    \"handler_withdraw(uint256)\",\n                    \"handler_claimRewards()\",\n                    \"handler_setRewardRate(uint256)\",\n                    \"handler_setProtocolFee(uint256)\",\n                    \"handler_setFeeRecipient(address)\",\n                    \"handler_emergencyWithdraw()\",\n                    \"property_ContractSolvency()\",\n                    \"property_BalanceConsistency()\",\n                    \"property_RewardPeriodState()\",\n                    \"setUp()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ExpectedErrors\": {},\n        \"Ghosts\": {},\n        \"Properties\": {\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\",\n                    \"property_ContractSolvency()\",\n                    \"property_BalanceConsistency()\",\n                    \"property_RewardPeriodState()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"property_ContractSolvency()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_BalanceConsistency()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_RewardPeriodState()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"Setup\": {},\n        \"TargetFunctions\": {\n            \"property_ContractSolvency()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_BalanceConsistency()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"property_RewardPeriodState()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"property_ContractSolvency()\",\n                    \"property_BalanceConsistency()\",\n                    \"property_RewardPeriodState()\",\n                    \"setUp()\",\n                    \"handler_stake(uint256)\",\n                    \"handler_withdraw(uint256)\",\n                    \"handler_claimRewards()\",\n                    \"handler_setRewardRate(uint256)\",\n                    \"handler_setProtocolFee(uint256)\",\n                    \"handler_setFeeRecipient(address)\",\n                    \"handler_emergencyWithdraw()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"handler_stake(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_withdraw(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_claimRewards()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_setRewardRate(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_setProtocolFee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_setFeeRecipient(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"handler_emergencyWithdraw()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"ActorManager\": {},\n        \"AssetManager\": {},\n        \"ERC20Mock\": {\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(string,string)\"\n                ]\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(string,string)\"\n                ]\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ]\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ]\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"totalSupply()\",\n                    \"balanceOf(address)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ]\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"allowance(address,address)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"totalSupply()\",\n                    \"balanceOf(address)\",\n                    \"transfer(address,uint256)\",\n                    \"allowance(address,address)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ]\n            },\n            \"constructor(string,string)\": {\n                \"impacts\": [\n                    \"name()\",\n                    \"symbol()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"totalSupply()\",\n                    \"balanceOf(address)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\"\n                ]\n            },\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        }\n    },\n    \"constructors\": {\n        \"ERC20\": \"constructor(string,string)\",\n        \"ReentrancyGuard\": \"constructor()\",\n        \"MALGovernanceStaking\": \"constructor(address,address,address)\",\n        \"MALO\": \"constructor(address,address,address,address)\",\n        \"RewardsDistributionRecipient\": \"constructor(address,address)\",\n        \"Staker\": \"constructor(address,address,address)\",\n        \"Staking\": \"constructor(address,address,address,uint256,address)\",\n        \"Actor\": \"constructor(address[],address[])\",\n        \"CryticTester\": \"constructor()\",\n        \"ExpectedErrors\": \"constructor()\",\n        \"Ghosts\": \"constructor(Staking,IERC20,IERC20)\",\n        \"Setup\": \"constructor()\",\n        \"ActorManager\": \"constructor()\",\n        \"AssetManager\": \"constructor()\",\n        \"ERC20Mock\": \"constructor(string,string)\"\n    },\n    \"have_external_calls\": {\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"Test\": [\n            \"failed()\"\n        ],\n        \"MALGovernanceStaking\": [\n            \"claimRewards()\",\n            \"getVotingPower(address)\",\n            \"withdraw(uint256)\",\n            \"createProposal(address,bytes)\",\n            \"vote(uint256,bool)\",\n            \"executeProposal(uint256)\",\n            \"stake(uint256)\"\n        ],\n        \"MALO\": [\n            \"emergencyWithdraw()\",\n            \"claimRewards()\",\n            \"withdraw(uint256)\",\n            \"notifyRewardAmount(uint256)\",\n            \"stake(uint256)\"\n        ],\n        \"Staker\": [\n            \"withdraw(uint256)\",\n            \"stake(uint256)\",\n            \"addReward(address,uint256,uint256)\",\n            \"claimRewards(address)\"\n        ],\n        \"Staking\": [\n            \"claimRewards()\",\n            \"emergencyWithdraw()\",\n            \"withdraw(uint256)\",\n            \"notifyRewardAmount(uint256)\",\n            \"setRewardRate(uint256)\",\n            \"stake(uint256)\"\n        ],\n        \"Actor\": [\n            \"constructor(address[],address[])\",\n            \"proxy(address,bytes)\",\n            \"proxy(address,bytes,uint256)\",\n            \"revokeApproval(address,address)\"\n        ],\n        \"BeforeAfter\": [\n            \"failed()\",\n            \"setUp()\"\n        ],\n        \"CryticTester\": [\n            \"handler_setProtocolFee(uint256)\",\n            \"property_ContractSolvency()\",\n            \"handler_stake(uint256)\",\n            \"handler_emergencyWithdraw()\",\n            \"property_BalanceConsistency()\",\n            \"property_RewardPeriodState()\",\n            \"handler_setFeeRecipient(address)\",\n            \"setUp()\",\n            \"handler_setRewardRate(uint256)\",\n            \"failed()\",\n            \"handler_withdraw(uint256)\",\n            \"handler_claimRewards()\"\n        ],\n        \"Properties\": [\n            \"property_ContractSolvency()\",\n            \"property_BalanceConsistency()\",\n            \"property_RewardPeriodState()\",\n            \"setUp()\",\n            \"failed()\"\n        ],\n        \"TargetFunctions\": [\n            \"handler_setProtocolFee(uint256)\",\n            \"property_ContractSolvency()\",\n            \"handler_stake(uint256)\",\n            \"handler_emergencyWithdraw()\",\n            \"property_BalanceConsistency()\",\n            \"handler_setRewardRate(uint256)\",\n            \"property_RewardPeriodState()\",\n            \"setUp()\",\n            \"handler_setFeeRecipient(address)\",\n            \"handler_claimRewards()\",\n            \"failed()\",\n            \"handler_withdraw(uint256)\"\n        ]\n    },\n    \"use_balance\": {},\n    \"solc_versions\": [\n        \"0.8.23\"\n    ],\n    \"with_fallback\": [],\n    \"with_receive\": [\n        \"Actor\"\n    ]\n}", "first_markdown_element": "", "id": "8f72316116c78ef74b404788c4f0543443efaaf304c9303e54bb706931da1bd9", "printer": "echidna"}]}}
